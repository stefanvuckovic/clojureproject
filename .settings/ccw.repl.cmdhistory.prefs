cmdhistory=["a" "(set (tokenize a))" "(remove \#{\\"the\\" \\"a\\"} (tokenize a))" "(\#{1 2} [1 2 4 5])" "(\#{1 2} 1)" "(remove \#{1 2} 1)" "(remove \#{1 2} [1 2 3 4 5])" "(transform-to-lowercase a)" "(seminarski.calculations/transform-to-lowercase a)" "(tokenize (seminarski.calculations/transform-to-lowercase a))" "(process a)" "(frequencies (process a))" "(def corpus (map process [{\\"The number of migrants entering Hungary from Serbia hit a new record on Saturday amid tension in eastern Europe over how to deal with the crisis. \\r\\n   More than 4,000 people walked across the border with Serbia just as the authorities in Hungary were completing preparations to seal the frontier.\\"} {\\"clojure.core.reducers has been a part of core for a year now, which is long enough to start using it without worrying too much about stability. fold is in particular a big speed improvement, and should be used wherever the conditions of its application can be met. For the rest, the performance improvements are mostly marginal, but thinking in terms of reducers might simplify modeling your problem, and to gain an extra boost in concert with fold. You can use map and filter as almost drop-in replacements, but you must remember to apply a reducer to their output.\\"}]))" "(def crp (map inc [1 4 5 6 7 8]))" "crp" "(def corpus (map process [ {\\"The number of migrants entering Hungary from Serbia hit a new record on Saturday amid tension in eastern Europe over how to deal with the crisis. \\r\\n   More than 4,000 people walked across the border with Serbia just as the authorities in Hungary were completing preparations to seal the frontier.\\"} {\\"clojure.core.reducers has been a part of core for a year now, which is long enough to start using it without worrying too much about stability. fold is in particular a big speed improvement, and should be used wherever the conditions of its application can be met. For the rest, the performance improvements are mostly marginal, but thinking in terms of reducers might simplify modeling your problem, and to gain an extra boost in concert with fold. You can use map and filter as almost drop-in replacements, but you must remember to apply a reducer to their output.\\"} ]))" "(def corpus (map process [ \\"The number of migrants entering Hungary from Serbia hit a new record on Saturday amid tension in eastern Europe over how to deal with the crisis. \\r\\n   More than 4,000 people walked across the border with Serbia just as the authorities in Hungary were completing preparations to seal the frontier.\\" \\"clojure.core.reducers has been a part of core for a year now, which is long enough to start using it without worrying too much about stability. fold is in particular a big speed improvement, and should be used wherever the conditions of its application can be met. For the rest, the performance improvements are mostly marginal, but thinking in terms of reducers might simplify modeling your problem, and to gain an extra boost in concert with fold. You can use map and filter as almost drop-in replacements, but you must remember to apply a reducer to their output.\\"]))" "corpus" "seminarski.calculations/corpus" "seminarski.calculations/cache" "(require '[opennlp.nlp \:as nlp]\\r\\n            '[clj-fuzzy.stemmers \:as stemmer]\\r\\n            '[clojure.string \:as string]\\r\\n            '[clojure.set \:as set])\\r\\n\\r\\n(def tokenize (nlp/make-tokenizer \\"models/en-token.bin\\"))\\r\\n\\r\\n(defn stem [word]\\r\\n  (stemmer/porter word)\\r\\n)\\r\\n\\r\\n(defn get-stop-words [file] \\r\\n  (set (tokenize (slurp file)))\\r\\n)\\r\\n\\r\\n(defn transform-to-lowercase [sentence] \\r\\n  (string/lower-case sentence)\\r\\n)\\r\\n\\r\\n(defn process [sentence]\\r\\n  (frequencies (map stem (filter-stop-words (get-stop-words \\"util/stopwords.txt\\") (tokenize (transform-to-lowercase sentence)))))\\r\\n)\\r\\n\\r\\n(defn filter-stop-words [stop-word-list tokens]\\r\\n  (remove stop-word-list tokens)\\r\\n)\\r\\n\\r\\n(defn  get-frequences [term-vector]\\r\\n (frequencies term-vector)\\r\\n)\\r\\n\\r\\n(defn tf [term-freq max-freq]\\r\\n(+ 0.5 (/ (* 0.5 term-freq) max-freq)))\\r\\n\\r\\n(defn idf [corpus term]\\r\\n(Math/log\\r\\n(/ (count corpus)\\r\\n(inc (count\\r\\n(filter \#(contains? % term) corpus))))))\\r\\n\\r\\n(defn get-corpus-terms [corpus]\\r\\n(->> corpus\\r\\n(map \#(set (keys %)))\\r\\n(reduce set/union \#{})))\\r\\n\\r\\n(defn get-idf-cache [corpus]\\r\\n(reduce \#(assoc %1 %2 (idf corpus %2)) {}\\r\\n(get-corpus-terms corpus)))\\r\\n\\r\\n(defn tf-idf [idf-value freq max-freq]\\r\\n(* (tf freq max-freq) idf-value))\\r\\n\\r\\n(defn tf-idf-pair [idf-cache max-freq pair]\\r\\n(let [[term freq] pair]\\r\\n[term (tf-idf (idf-cache term) freq max-freq)]))\\r\\n\\r\\n(defn tf-idf-freqs [idf-cache freqs]\\r\\n(let [max-freq (reduce max 0 (vals freqs))]\\r\\n(->> freqs\\r\\n(map \#(tf-idf-pair idf-cache max-freq %))\\r\\n(into {}))))\\r\\n\\r\\n(def corpus (map process [\\"Nervoza je bila i o\u010Dekivana, po\u0161to je ulog bio ogroman, a sav minuli rad postao je bezna\u010Dajan. To je najo\u010Diglednije bilo na po\u010Detku utakmice \u2013 nekoliko puta lopta je ispadala iz ruku na\u0161im momcima, proma\u0161eno je i nekoliko zicera, desila su nam se tri-\u010Detiri nerezonska faula, a u odbrani je bilo i dosta nesporazuma, \u0161to je za posledicu imalo otvorene pozicije za \u0161ut rivala.\\r\\n\\r\\nFinska je u prvom poluvremenu poga\u0111ala trojke u visokim procentima, ali Srbija je imala fizi\u010Dki superiornog Raduljicu i, \u0161to je veoma va\u017Eno, nije pani\u010Dila ni kada je protivnik u dva navrata poveo sa sedam poena razlike. U tim trenucima do izra\u017Eaja je do\u0161lo samopouzdanje ste\u010Deno pobedama u grupi.\\r\\n\\r\\nKako je vreme prolazilo, Srbija se privikavala na atipi\u010Dnog protivnika, petorka sa Ercegom i Bjelicom bila je pun pogodak, a po\u010Deli smo bolje da kontroli\u0161emo skok i da budemo odgovorniji u napadu, smanjen je broj izgubljenih lopti.\\r\\n\\r\\nUz to, ru\u017Eno je re\u0107i, ali imali smo malo i sre\u0107e zbog povrede Peterija Koponena, najboljeg igra\u010Da suparnika, koji od fini\u0161a tre\u0107e \u010Detvrtine vi\u0161e nije ulazio u igru.\\r\\n\\r\\nNa kraju smo Fince dotukli njihovim oru\u017Ejem \u2013 utakmica je prelomljena nizom trojki, a posebno raduje \u0161to su veliki udeo u tome imali i igra\u010Di iz drugog plana.\\r\\n\\r\\nSrbija je pokazala zrelost, individualnu i timsku, i ovakva radni\u010Dki i rudarski izborena pobeda mo\u017Ee samo da ohrabruje pred nastavak takmi\u010Denja i \u010Detvrtfinale sa \u010Ce\u0161kom.\\" \\"Srbija je pobedila Finsku sa 94\:81 i plasirala se u \u010Detvrtfinale Evropskog prvenstva gde \u0107e igrati protiv \u010Ce\u0161ke.\\r\\n\\r\\n\u201EOtvorili smo nervozno me\u010D i to ne bi trebalo da radimo. Nijedna utakmica se ne dobija u prva tri minuta, posle prva tri suta. Imali smo pritisak na po\u010Detku i to nikako vise ne sme da se ponovi. Gre\u0161ke koje smo pravili vi\u0161e ne smeju da se ponove. Svaki slede\u0107i protivnik je ja\u010Di. Znamo svoje prednosti i svoje slabosti. Oni igraju jako dobru, jaku brzu ko\u0161arku, sa mnogo blokada, mnogo dodavanja. Salin je jedan od najboljih evropskih \u0161utera. Pogodio je neke trojke iz istr\u010Davanja. Otvorila im se utakmica, ali smo odgovorili solidnom odbranom. Ne i najboljom.\\r\\n\\r\\nSelektor je istakao role Raduljice, Bjelice, Ercega, ali i Simonovi\u0107a koji je odbranom i nekim klju\u010Dnim trojkama mo\u017Eda i prelomio me\u010D.\\r\\n\\r\\n\u201EVideli ste da smo me\u0161ali petorke, igrali smo sa ni\u017Eom petorkom i mislim da smo to dobro uradili. Na\u0161li smo re\u0161enje u Simonovi\u0107u koji je spre\u010Dio brzi protoik lopte. Imali smo i neke lagane poene kojih nije bilo mnogo.\u201CImali smo protok lopte u nastavku, Raduljica je odli\u010Dno re\u0161io te stvari koje sam tra\u017Eio od njega, Bjelica i Erceg su dobro \u010Ditali situacije, oni su bili distributeri lopte i to je bilop dobro. Dosta je iz nervoze i nestrpljenja bilo izgubljenih lopti, oni su imali 20 napada vi\u0161e \u0161to me iznena\u0111uje, ali oni su skinuli dosta lopti ispod ko\u0161a. Jedna izuzetno va\u017Ena pobeda, ovo nam ve\u0107 daje \u0161ansu z Olimpijske igre, ali to je samo mali podatak. To nas ne interesuje, okre\u0107emo se \u010Detvrtfinalu protiv \u010Ce\u0161ke koja je odigrala videli ste kakvu partiju i zaslu\u017Eeno je pro\u0161la. Ve\u0107 smo ih gledali, skautirali, imamo neku ideju, ali moramo da smirimo glavu i da vratimo energiju koji smo malo izgubili. Nije nam najbolje legla promena iz Berlina u Lil jer smo bili u jako dobrom ritmu. Imali smo dobar zalet, ali \u0161ta da se radi, to je tako. Sutra imamo mali oporavak, teretanu, a prekosutra jedan trening\u201C, rekao je \u0110or\u0111evi\u0107 i dodao da na\u0161oj ekipi ne\u0107e biti nezgodno da igra kao protiv Finske.\\" \\"\\r\\n\\r\\n\u010Ce\u0161ka \u0107e u \u010Detvrtfinalu igrati sa boljim iz me\u010Da Srbija - Finska.\\r\\n\\r\\n\u010Cesi su odigrali mnogo borbenije, sa vi\u0161e energije i ve\u0107 po\u010Detkom druge \u010Detvrtine stekli su dvocifrenu prednost (23\:13). Lako su dolazili do otvorenih pozicija za \u0161ut, koje su koristili, a Satoranski i Veseli imali su obilatu pomo\u0107 Jelineka, Aude i Bende.\\r\\n\\r\\nPrednost je konstantno rasla, Hrvatska je do\u017Eivela peh u vidu povrede Simona po\u010Detkom drugog poluvremena, a u zavr\u0161nici tre\u0107eg perioda bilo je neverovatnih +30 (63\:33) za \u010Ce\u0161ku. Tada je do\u0161lo do malog opu\u0161tanja i izgubljenih lopti u nizu, a Hrvati su kona\u010Dno \u017Eivnuli \u2013 zaigrali su \u010Dvr\u0161\u0107e u odbrani i pogodili nekoliko trojki.\\r\\n\\r\\nIpak, za preokret je bilo kasno, sve \u0161to je Hrvatska uspela jeste da smanji na 13 poena zaostatka (69\:56) na \u010Detiri i po minuta do kraja, ali onda je \u0160ilb otklonio sve dileme u vezi sa pobednikom.\\r\\n\\r\\nNajbolji kod \u010Ce\u0161ke bio je Jan Veseli sa 20 poena (9-12 iz igre) i 13 skokova, David Jelinek dao je 13 poena (5-8 iz igre), a odli\u010Dan je bio i Toma\u0161 Satoranski sa 10 poena (4-10 iz igre), 5 skokova i 11 asistencija. Petr Benda dodao je 11 poena i po 3 skoka i asistencije, a Blejk \u0160ilb ubacio je 12 poena (4-7 iz igre).\\r\\n\\r\\nBojan Bogdanovi\u0107 bio je najefikasniji kod Hrvatske sa 12 poena (5-14 iz igre), Mario Hezonja dao je 10 (3-7 iz igre), ali je ceo tim podbacio \u2013 Ante Tomi\u0107 nije se ni upisao u strelce, a Dario \u0160ari\u0107 je dao 4 poena (1-7 iz igre) za 31 minut na parketu.\\r\\n\\r\\n\u010Cesi su odigrali timski, imali su 14 vi\u0161e asistencija (27-13) i upola manje izgubljenih lopti (24-12), pa su se zaslu\u017Eeno plasirali dalje.\\r\\n\\"]))\\r\\n\\r\\n(def cache (get-idf-cache corpus))\\r\\n\\r\\n(def freqs (map \#(tf-idf-freqs cache %) corpus))" "corpus" "seminarski.calculations/corpus" "seminarski.calculations/corpus2" "seminarski.calculations/corpus" "seminarski.calculations/corpus2" "seminarski.calculations/cache" "(count docs)" "(count seminarski.calculations/docs)" "(Math/log 4)" "(Math/log 2)" "(Math/log (/ 4 3))" "seminarski.calculations/freqs" "seminarski.calculations/corpus2" "seminarski.calculations/cache" "(seminarski.calculations/process2 seminarski.calculations/docs)" "seminarski.calculations/cache" "seminarski.calculations/freqs" "seminarski.calculations/cache" "(Math/log (/ 4 5))" "seminarski.calculations/cache" "seminarski.calculations/freqs" "(into {} ([\\"s\\" 2] [\\"t\\" 3] [\\"e\\" 4]))" "(into {} '([\\"s\\" 2] [\\"t\\" 3] [\\"e\\" 4]))" "(update-in {} [\\"stef\\"] conj 4)" "(update-in (update-in {} [\\"stef\\"] conj 4) [\\"stef\\"] conj 6)" "(update-in (update-in (update-in {} [\\"stef\\"] conj 4) [\\"stef\\"] conj 6) [\\"st\\"] conj 5)" "(defn add-to-vector [col item]\\n  (fnil conj []))" "(update-in {} [\\"stef\\"] add-to-vector 4)" "(add-to-vector nil 5)" "(defn add-to-vector []\\n  (fnil conj []))" "(add-to-vector nil 5)" "(def test (fnil conj []))" "(test nil 5)" "(update-in {} [\\"stef\\"] test 4)" "(update-in (update-in {} [\\"stef\\"] test 4) [\\"stef\\"] test 6)" "(fnil inc 0)" "(defn add-to-vector [col val]\\n  ((fnil conj []) col val))" "(update-in {} [\\"stef\\"] add-to-vector 4)" "(defn add-to-vector2 []\\r\\n     fnil conj [])" "(update-in {} [\\"stef\\"] add-to-vector2 4)" "(update-in {} [\\"stef\\"] (add-to-vector2) 4)" "(defn add-to-vector2 []\\r\\n     (fnil conj []))" "(add-to-vector2 nil 5)" "(def (inc 6))" "(def b (inc 5))" "b" "(defn bc [] \\n  (inc 6))" "(bc)" "((add-to-vector2) nil 5)" "(update-in nil [\\"stef\\"] (add-to-vector2) 4)" "seminarski.calculations/corpus" "(seminarski.calculations/calculate-tfidf-for-all)" "(\\"fox\\" seminarski.calculations/docs)" "(def a {\\"fox\\" 4, \\"stef\\" 2, \\"aca\\" 1})" "(\\"fox\\" a)" "(\:fox a)" "(def a {\\"fox\\" 4, \\"stef\\" 2, \\"aca\\" 1, \:stef 5})" "(\:stef a)" "\:stef a" "(a \:stef)" "(a \\"fox\\")" "(seminarski.calculations/calculate-tfidf-for-all)" "(println a)" "(seminarski.calculations/calculate-tfidf-for-all)" "(* nil 5)" "(seminarski.calculations/calculate-tfidf-for-all)" "(process docs)" "(seminarski.calculations/process docs)" "(seminarski.calculations/process seminarski.calculations/docs)" "seminarski.calculations/corpus" "(seminarski.calculations/calculate-tfidf-for-all)" "seminarski.calculations/corpus" "(seminarski.calculations/calculate-tfidf-for-all)" "(def v [1 4 6])" "v" "(conj v 5)" "(conj v 2)" "(conj (conj v 5) 2)" "(into {} ({\:a 1, \:b 2}))" "(into {} '({\:a 1, \:b 2}))" "(into {} {\:a 1, \:b 2})" "(seminarski.calculations/f)" "seminarski.calculations/cache" "(count seminarski.calculations/cache)" "(seminarski.calculations/f)" "(seminarski.calculations/calculate-tfidf-for-all)" "(into {} ([\:id 1] [\:id 2]))" "(into {} [[\:id 1] [\:id 2]])" "(into (sorted-map) [ [\:a 1] [\:c 3] [\:b 2] ] )" "(into {} [ [\:id 1] [\:id 2] ])" "{\:id 1, \:id 2}" "{{\:id 1}, {\:id 2}}" "(seminarski.calculations/calculate-tfidf-for-all)" "(def vec (seminarski.calculations/calculate-tfidf-for-all))" "vec" "(vec 0)" "(count (\:tokens (vec 0)))" "(def vec (seminarski.calculations/calculate-tfidf-for-all))" "vec" "(def vec (seminarski.calculations/calculate-tfidf-for-all))" "vec" "(time (seminarski.calculations/calculate-tfidf-for-all-map))" "(time (seminarski.calculations/calculate-tfidf-for-all))" "(time (seminarski.calculations/calculate-tfidf-for-all-map))" "(time (seminarski.calculations/calculate-tfidf-for-all-pmap))" "{\:id 1, \:stef 2}" "{\:id 1 \:stef 2}" "(def vec (seminarski.calculations/calculate-tfidf-for-all))" "vec" "(def v1 (\:tokens (vec 0)))" "v1" "(def v2 (\:tokens (vec 1)))" "v2" "(seminarski.calculations/calculate-parameters-for-cosine-similarity v1 v2)" "(seminarski.calculations/calculate-parameters-for-cosine-similarity [1 1] [2 2])" "(use 'clojure.contrib.math)" "(Math/pow 5 2)" "(- 30 25.0)" "(seminarski.calculations/calculate-parameters-for-cosine-similarity [1 1] [2 2])" "(seminarski.calculations/calculate-parameters-for-cosine-similarity [2 3] [3 5])" "(seminarski.calculations/calculate-cosine-similarity [2 3] [3 5])" "(reverse \\"stef\\")" "(defn test [num1 num2]\\n  (+ num1 num2))" "(defn test1 [num1 num2]\\n  (+ num1 num2))" "(defn test2 []\\n  (map test1 1 [4 5 6 7]))" "(test2)" "(defn test2 []\\n  (map (partial test1 1) [4 5 6 7]))" "(test2)" "(sort \#(compare (last %1) (last %2)) {\:b 1 \:c 3 \:a  2})" "(into {} (sort \#(compare (last %1) (last %2)) {\:b 1 \:c 3 \:a  2}))" "(into {} (sort \#(compare (last %1) (last %2)) [{\:id 1 \:score 0.5} {\:id 2 \:score 0.3} {\:id 3 \:score 0.9}]))" "(into {} (sort \#(compare (\:score %1) (\:score %2)) [{\:id 1 \:score 0.5} {\:id 2 \:score 0.3} {\:id 3 \:score 0.9}]))" " (sort \#(compare (\:score %1) (\:score %2)) [{\:id 1 \:score 0.5} {\:id 2 \:score 0.3} {\:id 3 \:score 0.9}])" "(into [] (sort \#(compare (\:score %1) (\:score %2)) [{\:id 1 \:score 0.5} {\:id 2 \:score 0.3} {\:id 3 \:score 0.9}]))" "(into [] (sort > \#(compare (\:score %1) (\:score %2)) [{\:id 1 \:score 0.5} {\:id 2 \:score 0.3} {\:id 3 \:score 0.9}]))" "(sort-by > \:score [{\:id 1 \:score 0.5} {\:id 2 \:score 0.3} {\:id 3 \:score 0.9}])" "(sort-by \:score [{\:id 1 \:score 0.5} {\:id 2 \:score 0.3} {\:id 3 \:score 0.9}])" "(sort-by \:score > [{\:id 1 \:score 0.5} {\:id 2 \:score 0.3} {\:id 3 \:score 0.9}])" "(repeatedly 1)" "(repeat 1)" "(take 16000000 (repeat 1))" "(take 10 (repeat 1))" "(take 15000000 (repeat 1))" "(* 4000 4000)" "(def ss (sorted-set 5 1 3 6))" "ss" "(conj ss 9)" "(conj ss 2)" "(take 10 ss)" "(sorted-set {\:id 1 \:stef 2} {\:id 3 \:stef 5})" "(sorted-map {\:id 1 \:stef 2} {\:id 3 \:stef 5})" "(sorted-map {\:id 1 \:stef 9} {\:id 3 \:stef 5})" "(sorted-map-by \:stef {\:id 1 \:stef 9} {\:id 3 \:stef 5})" "(sorted-map-by \:stef [{\:id 1 \:stef 9} {\:id 3 \:stef 5}])" "(sorted-map-by > [{\:id 1 \:stef 9} {\:id 3 \:stef 5}])" "(sorted-map-by > '({\:id 1 \:stef 9} {\:id 3 \:stef 5}))" "(sorted-map-by > {\:id 1 \:stef 9} {\:id 3 \:stef 5})" "(seminarski.calculations/calculate-tfidf-for-all)" "(seminarski.calculations/cosine-similarity-for-all (seminarski.calculations/calculate-tfidf-for-all))" "seminarski.calculations/corpus" "(seminarski.calculations/calculate-tfidf-for-all)" "(seminarski.calculations/cosine-similarity-for-all (seminarski.calculations/calculate-tfidf-for-all))" "(filter \:s {\:id 1, \:s [nil 2 4 6]})" "(filter (not\= nil \:s) {\:id 1, \:s [nil 2 4 6]})" "(seminarski.calculations/cosine-similarity-for-all (seminarski.calculations/calculate-tfidf-for-all))" "(update-in {\:id 1, \:similar [1 2 nil 3 4 5]} [\:similar] remove nil?)" "(def testic {\:id 1, \:similar [1 2 nil 3 4 5]})" "testic" "(remove nil? \:similar)" "(remove nil? (\:similar testic))" "(update-in testic [\:similar] remove nil?)" "(update-in testic [\:similar] (partial remove nil?))" "(defn testic1 [vec]\\n  (into [] (remove nil? vec)))" "(update-in testic [\:similar] testic1)" "(seminarski.calculations/cosine-similarity-for-all (seminarski.calculations/calculate-tfidf-for-all))" "(seminarski.controller/get-all-data)" "(seminarski.calculations/cosine-similarity-for-all (seminarski.calculations/calculate-tfidf-for-all (seminarski.calculations/get-preprocessed-data docs)))" "(seminarski.calculations/cosine-similarity-for-all (seminarski.calculations/calculate-tfidf-for-all (seminarski.calculations/get-preprocessed-data seminarski.calculations/docs)))" "(seminarski.calculations/cosine-similarity-for-all \\n  (seminarski.calculations/calculate-tfidf-for-all \\n    (seminarski.calculations/get-preprocessed-data seminarski.controller/get-all-data)))" "(seminarski.calculations/cosine-similarity-for-all \\n  (seminarski.calculations/calculate-tfidf-for-all \\n    (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-all-data))))" "(seminarski.calculations/cosine-similarity-for-all \\n  (seminarski.calculations/calculate-tfidf-for-all \\n    (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 2 nil nil))))" "(seminarski.calculations/cosine-similarity-for-all \\n  (seminarski.calculations/calculate-tfidf-for-all \\n    (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 5 nil nil))))" "(seminarski.calculations/cosine-similarity-for-all \\n  (seminarski.calculations/calculate-tfidf-for-all \\n    (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 7 nil nil))))" "(seminarski.calculations/cosine-similarity-for-all \\n  (seminarski.calculations/calculate-tfidf-for-all \\n    (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil))))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil)))))" "(time\\n     (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil)))" "(time\\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil))))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil)))))" "(shutdown-agents)" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil)))))" "(time (seminarski.calculations/get-idf-cache (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db \\"movies\\" 1 10 nil nil))))" "(time (seminarski.calculations/get-idf-cache (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil))))" "(time (seminarski.calculations/get-idf-cache (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-all-data))))" "(time (seminarski.calculations/get-idf-cache (seminarski.calculations/get-preprocessed-data docs)))" "(time (seminarski.calculations/get-idf-cache (seminarski.calculations/get-preprocessed-data seminarski.calculations/docs)))" "(time (seminarski.calculations/get-idf-cache (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-all-data))))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil)))))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil))))" "(time (seminarski.calculations/calculate-tfidf-for-all \\n        (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil))))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil)))))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description \\"\\"} )))))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description nil} )))))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description \\"\\"} )))))" "(seminarski.calculations/tokenize \\"\\")" "(stem [])" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description \\"\\"} )))))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description \\"\\"} ))))" "(time \\n        \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description \\"\\"} )))" "(reduce + (vals {}))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description \\"\\"} ))))" "(def doc {\:_id 1, \:description [1 2 4 5]})" "(update-in doc [\:descritpion] inc)" "(update-in doc [\:descritpion] map inc)" "(update-in doc [\:descritpion] (partial map inc))" "(update-in doc [\:description] (partial map inc))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description \\"\\"} ))))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (conj seminarski.calculations/docs {\:_id 5 \:description \\"\\"} )))))" "(def doctest [{\:_id 1 \:description \\"Stefan is the best. Amazing Stefan is the best.\\"} {\:_id 2 \:description \\"Stefan is the best. Amazing Stefan is the best.\\"}\\n              {\:_id 3 \:description \\"Stefan is the best. Amazing Stefan is the best.\\"} {\:_id 4 \:description \\"Stefan is the best. Amazing Stefan is the best.\\"}])" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data doctest))))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data doctest)))" "(def doctest (assoc doctest {\:_id 5 \:description \\"Stef really is superb. Hello to all. Bjelica sucks. Teodosic is great\\"}))" "(def doctest (assoc doctest 4 {\:_id 5 \:description \\"Stef really is superb. Hello to all. Bjelica sucks. Teodosic is great\\"}))" "doctest" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data doctest)))" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data doctest))))" "(def testsim ({\:_id 1, \:tokens (0.0 0.08925742052568392 0.0 0.0 0.0 0.0 0.0 0.0 0.08925742052568392 0.04462871026284196)} {\:_id 2, \:tokens (0.0 0.08925742052568392 0.0 0.0 0.0 0.0 0.0 0.0 0.08925742052568392 0.04462871026284196)} {\:_id 3, \:tokens (0.0 0.08925742052568392 0.0 0.0 0.0 0.0 0.0 0.0 0.08925742052568392 0.04462871026284196)} {\:_id 4, \:tokens (0.0 0.08925742052568392 0.0 0.0 0.0 0.0 0.0 0.0 0.08925742052568392 0.04462871026284196)} {\:_id 5, \:tokens (0.2299197017763001 0.0 0.2299197017763001 0.2299197017763001 0.2299197017763001 0.2299197017763001 0.2299197017763001 0.2299197017763001 0.0 0.0)}))" "(def testsim [{\:_id 1, \:tokens [0.0 0.08925742052568392 0.0 0.0 0.0 0.0 0.0 0.0 0.08925742052568392 0.04462871026284196]} {\:_id 2, \:tokens [0.0 0.08925742052568392 0.0 0.0 0.0 0.0 0.0 0.0 0.08925742052568392 0.04462871026284196]} {\:_id 3, \:tokens [0.0 0.08925742052568392 0.0 0.0 0.0 0.0 0.0 0.0 0.08925742052568392 0.04462871026284196]} {\:_id 4, \:tokens [0.0 0.08925742052568392 0.0 0.0 0.0 0.0 0.0 0.0 0.08925742052568392 0.04462871026284196]} {\:_id 5, \:tokens [0.2299197017763001 0.0 0.2299197017763001 0.2299197017763001 0.2299197017763001 0.2299197017763001 0.2299197017763001 0.2299197017763001 0.0 0.0]}])" "testsim" "(seminarski.calculations/get-similarity-score (\:tokens (testsim 0)) (\:tokens (testsim 4)))" "(\:tokens (testsim 0))" "(\:tokens (testsim 4))" "(seminarski.calculations/get-similarity-score (testsim 0) (testsim 4))" "(sort-by \:score [ {\:id 1 \:score 0.7} {\:id 2 \:score 0.3} {\:id 3 \:score 0.5}])" "(time (seminarski.calculations/cosine-similarity-for-all \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil)))))" "(seminarski.controller/calculate-recommendations)" "(time (seminarski.controller/calculate-recommendations))" "(take 20000 (repeat 1))" "(take 20 (repeat 1))" "(take 1000 (repeat 1))" "(take 10000 (repeat 1))" "(take 20000 (repeat 1))" "(take 15000 (repeat 1))" "(take 1000000 (repeat 1))" "(doall (take 1000000 (repeat 1)))" "(time (seminarski.controller/calculate-recommendations))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data (seminarski.controller/get-movies-from-db 1 10 nil nil))))" "(def stefc (seminarski.calculations/get-preprocessed-data seminarski.controller/docs))" "stefc" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all stefc))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all stefc stefc))" "(def stefv \\n        (seminarski.calculations/calculate-tfidf-for-all stefc stefc))" "stefv" "(map \#(update-in % [\:tokens] deref) stefv)" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          (seminarski.calculations/get-preprocessed-data seminarski.controller/docs)))" "stefc" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          stefc stefc))" "(time \\n        (seminarski.calculations/deref-futures (seminarski.calculations/calculate-tfidf-for-all \\n                         stefc stefc)))" "(time \\n        (seminarski.calculations/deref-futures (seminarski.calculations/calculate-tfidf-for-all2 \\n                         stefc stefc)))" "(time (seminarski.controller/calculate-recommendations))" "(time (def a [1 2 3 5]))" "(time (def steffull (seminarski.controller/calculate-recommendations)))" "(pritnln \\"stef\\")" "steffull" "(seminarski.calculations/calculate-cosine-similarity [1 2] [1 2])" "(seminarski.calculations/calculate-cosine-similarity [1 0 0 0 0 0 0 0 2] [1 0 0 0 0 0 0 0 2])" "(seminarski.calculations/calculate-cosine-similarity [3 0 0 0 0 0 0 0 4 5] [5 0 0 0 0 0 0 0 1 2])" "(seminarski.calculations/calculate-cosine-similarity [3 4 5] [5 1 2])" "(time (seminarski.controller/calculate-recommendations))" "(def stefc (seminarski.calculations/get-preprocessed-data seminarski.controller/docs))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all \\n          stefc stefc))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all2 \\n          stefc stefc))" "(time (seminarski.controller/calculate-recommendations))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all2 \\n          stefc stefc))" "(time (seminarski.controller/calculate-recommendations))" "(def as (seminarski.controller/get-movies-from-db 1 10 nil nil))" "as" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all2 \\n          as as))" "(def as1 (seminarski.calculations/get-preprocessed-data as))" "as1" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all2 \\n          as1 as1))" "(time (seminarski.controller/calculate-recommendations))" "(fnil (map [1 2 nil 4]) 0)" "(fnil (map [1 2 4 5] [1 2 3 4]) 0)" "(fnil map [1 2 4 5] [1 2 3 4] 0)" "(fnil (partial map [1 2 4 5] [1 2 3 4]) 0)" "(fnil \#(map [1 2 4 5] [1 2 3 4]) 0)" "([1 2 4 5] 1)" "(fnil (fn [] map [1 2 4 5] [1 2 3 4]) 0)" "(fnil (fn [] (map [1 2 4 5] [1 2 3 4])) 0)" "@(fnil (fn [] (map [1 2 4 5] [1 2 3 4])) 0)" "((fnil (fn [] (map [1 2 4 5] [1 2 3 4])) 0))" "(defn fj []\\n  (fnil \#(map [1 2 4 5] [1 2 3 4])))" "fj" "(fj)" "(defn fj []\\n  (fnil \#(map [1 2 4 5] [1 2 3 4]) 0))" "fj" "(fj)" "(defn fj [x y]\\n  (fnil \#(map x y) 0))" "(fj [1 2 4 5] [1 2 3 4])" "((fj [1 2 4 5] [1 2 3 4]))" "(def say-hello-with-defaults (fnil map 0))" "(say-hello-with-defaults [1 2 4 5] [1 2 3 4])" "(say-hello-with-defaults {1 \\"stef\\" 2 \\"stef1\\" 4 \\"stef2\\" 5 \\"stef3\\"} [1 2 3 4])" "(replace {nil 0} [1 3 4 5 nil 6])" "(time (seminarski.controller/calculate-recommendations))" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all2 \\n          as1 as1))" "as1" "(def as (seminarski.controller/get-movies-from-db 1 10 nil nil))" "as" "(def as1 (seminarski.calculations/get-preprocessed-data as))" "as1" "(time \\n        (seminarski.calculations/calculate-tfidf-for-all2 \\n          as1 as1))" "(time \\n        (seminarski.calculations/calculate-cosine-similarities2\\n          as1 as1))" "(time \\n        (seminarski.calculations/calculate-cosine-similarities3\\n          as1 as1))" "(def v1 [1 2 3 4 5 6 7])" "(def v2 [2 3 5 1 6 4 8])" "(seminarski.calculations/get-similarity-score2 v1 v2)" "(seminarski.calculations/calculate-cosine-similarity v1 v2)" "(def v1m {\:_id 1 \:tokens v1})" "v1m" "(def testv1 {\:_id 1 \:tokens {\\"stef\\" 1 \\"stef2\\" 2 \\"stef3\\" 5}})" "(def testv2 {\:_id 2 \:tokens {\\"stef2\\" 3 \\"stef4\\" 5 \\"stef5\\" 4}})" "(seminarski.calculations/prepare-vectors testv1 testv2)" "(seminarski.calculations/set/union (keys (\:tokens testv1)) (keys (\:tokens testv2)))" "(set/union (keys (\:tokens testv1)) (keys (\:tokens testv2)))" "(set/union (set (keys (\:tokens testv1))) (set (keys (\:tokens testv2))))" "(seminarski.calculations/prepare-vectors testv1 testv2)" "testv1" "testv2" "(time (seminarski.controller/calculate-recommendations))" "(ti" "(time (seminarski.controller/calculate-recommendations))" "(time (def steftest (seminarski.controller/calculate-recommendations)))" "steftest" "(time (seminarski.controller/calculate-recommendations))" "(partition 5 (range 23))" "(time (seminarski.controller/calculate-recommendations))" "['(1 2 3 4 5) '(4 6 7 8 9)]" "(time (seminarski.controller/calculate-recommendations))" "(doall (map inc [1 2 3 4 5 6]))" "(dorun (map inc [1 2 3 4 5 6]))" "(time (seminarski.controller/calculate-recommendations))" "(def a nil)" "(if (a) \\"stef\\" \\"stef4\\")" "(if (nil? a) \\"stef\\" \\"stef4\\")" "(if (not nil? a) \\"stef\\" \\"stef4\\")" "(if-not (nil? a) \\"stef\\" \\"stef4\\")" "(if (\= 1 2)\\n \\"stef\\")" "(list \\n  \\"stef\\"\\n  (if (\= 1 2)\\r\\n    \\"stef\\"))" "(remove nil? '(\\"stef\\" nil))" "(seminarski.controller/get-similar-movie 187)" "(seminarski.controller/get-similar-movie (str 187))" "(get-data-pagination \\"movies\\" 1 20)" "(db/get-data-pagination \\"movies\\" 1 20)" "(seminarski.db/get-data-pagination \\"movies\\" 1 20)" "(seminarski.db/get-data-pagination \\"movies\\" 1 20 \:fields [\:title \:imdb_rating])" "(apply cons [\\"/js/bootstrap.min.js\\" \\"/js/jquery-1.11.3.min.js\\"] [])" "(apply cons [\\"/js/bootstrap.min.js\\" \\"/js/jquery-1.11.3.min.js\\"] [\\"s\\"])" "(apply cons [\\"/js/bootstrap.min.js\\" \\"/js/jquery-1.11.3.min.js\\"] [\\"s\\" \\"stef\\"])" "(def vector1 [1 2 3 [\\"stef]])" "(def vector1 [1 2 3 [\\"stef\\"]])" "(remove \#(get-in vector1 [0 1]) vector1)" "(def vector1 [\\"stef\\" [\\"stef1\\" [2 4]]])" "vector1" "(remove \#(get-in vector1 [1 1]) vector1)" "(remove \#(get-in % [1 1]) vector1)" "(remove \#(get-in % [0 1]) vector1)" "(remove \#(get-in % [1 0]) vector1)" "(conj [1 2] 3)" "(list [1 2 3 4])" "(vector '(1 2 3 4))" "(for [x [4 6 8 9 10 12]\\r\\n      \:let [y (iterate inc 1)]]\\n  (if (\= 1 (mod y 3))\\n    (println \\"naso\\")))" "(for [x [4 6 8 9 10 12]\\r\\n      \:let [y (iterate inc 1)]]\\n  y)" "(for [x [4 6 8 9 10 12]\\r\\n      \:let [y (iterate inc 1)]]\\n  x)" "(select-keys {\:a 1 \:b 2 \:c 3} [\:a \:c])" "(seminarski.config/save-similarities-in-file)" "(seminarski.config/import-similarities)" "(seminarski.config/import-movies)" "(seminarski.config/import-similarities)" "(seminarski.config/get-json-from-file (seminarski.config/get-config-file))" "(def as (seminarski.config/get-json-from-file (seminarski.config/get-config-file)))" "(if (\:download-movies)\\n  (println \\"stef\\"))" "(if (\:download-movies as)\\n  (println \\"stef\\"))" "(if (\= (\:download-movies as) false)\\n  (println \\"stef\\"))" "(if (true? (\:download-movies as))\\n  (println \\"JESTE\\"))" "(def asa {\:download-movies true})" "(if (true? (\:download-movies asa))\\n  (println \\"JESTE\\"))" "(let [data [[1 [\\"a\\" \\"little\\" \\"lamb\\"]]  \\r\\n            [2 [\\"row\\" \\"your\\" \\"boat\\"]]]\\r\\n      instance-list (make-instance-list data)]\\r\\n  (lda instance-list))" "(seminarski.lda/testlda)" "(println \\"stef\\")" "(seminarski.lda/testlda)" "(if (> 4 nil)\\n  (println \\"stef\\"))" "(* 30 0.05)" "(* 30 0.02)" "(* 30 0.04)" "(time (seminarski.calculations/tfidf))" "(println \\"stef\\")" "(time (seminarski.calculations/tfidf))" "(def users [{\:name \\"James\\" \:age 26}  {\:name \\"John\\" \:age 43}])" "(update-in users [1 \:age] inc)" "(update-in users [2 \:age] inc)" "(defn tes [par col]\\n  (par col))" "(def cole {\:stef 1 \:car 2})" "(tes \:stef cole)" "(tes \:car cole)" "(def movie {\:_id 1 \:title \\"Stefan is the best\\" \:actors \\n            [{\:imdb_code 12 \:name \\"Stefan\\"} {\:imdb_code 13 \:name \\"Aca\\"}] \\n            \:directors [{\:imdb_code 14 \:name \\"Nesto\\"}\\n                      {\:imdb_code 13 \:name \\"Aca\\"}]\\n            \:genres [\\"Romance\\" \\"Drama\\"]\\n            \:description \\"Stefan is the best soccer player in the world\\"})" "(defn movie-proc (seminarski.tfidf/get-preprocessed-data movie))" "(defn movie-proc (seminarski.tfidf/get-preprocessed-data [movie]))" "(defn movie-proc (seminarski.tfidf/get-preprocessed-data (vector movie)))" "(defn movie-proc (seminarski.tfidf/get-preprocessed-data (into [] movie)))" "(def be (into [] movie))" "be" "(defn movie-proc (seminarski.tfidf/get-preprocessed-data be))" "(seminarski.calculations/test-preprocess)" "(def abc (seminarski.db/get-by-id \\"movies\\" 187))" "abc" "(seminarski.tfidf/get-title-processed abc)" "(seminarski.tfidf/get-title-processed (\:title abc))" "(seminarski.tfidf/get-cast-list (\:actors abc))" "(seminarski.tfidf/prepare-attributes sum (seminarski.tfidf/get-cast-list (\:actors movie)) 0.05)" "(let [sum (reduce + (vals (\:tokens movie)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors movie)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors movie)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title movie)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres movie) 0.05)]\\r\\n     (merge-vectors (\:tokens movie) actors directors title genres))" " (defn abc-test[movie]\\r\\n   (let [sum (reduce + (vals (\:tokens movie)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors movie)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors movie)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title movie)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres movie) 0.05)]\\r\\n     (merge-vectors (\:tokens movie) actors directors title genres)))" "(abc-test abc)" "\\r\\n   (let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors movie)) 0.05)])" "\\r\\n   (let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)])" "(seminarski.tfidf/get-preprocessed-data abc)" "(seminarski.tfidf/process abc)" "\\r\\n   (let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)])" " \\r\\n   (let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n     (merge-vectors (\:tokens abc) actors directors title genres)]\\n     sum)" " \\r\\n   (let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n        final (merge-vectors (\:tokens abc) actors directors title genres)]\\n     sum)" " \\r\\n   (let [sum (reduce + (vals (\:tokens (process abc))))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n        final (merge-vectors (\:tokens abc) actors directors title genres)]\\n     sum)" " \\r\\n   (let [sum (reduce + (vals (\:tokens (process abc))))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n        final (merge-vectors (\:tokens abc) actors directors title genres)]\\n     actors)" " \\r\\n   (let [sum (reduce + (vals (\:tokens (process abc))))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n        final (merge-vectors (\:tokens abc) actors directors title genres)]\\n     directors)" " \\r\\n   (let [sum (reduce + (vals (\:tokens (process abc))))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n        final (merge-vectors (\:tokens abc) actors directors title genres)]\\n     title)" " \\r\\n   (let [sum (reduce + (vals (\:tokens (process abc))))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n        final (merge-vectors (\:tokens abc) actors directors title genres)]\\n     genres)" " \\r\\n   (let [sum (reduce + (vals (\:tokens (process abc))))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n        final (merge-vectors (\:tokens abc) actors directors title genres)]\\n     final)" " \\r\\n   (let [sum (reduce + (vals (\:tokens (process abc))))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n        final (assoc-in abc [\:tokens] (merge-vectors (\:tokens abc) actors directors title genres))]\\n     final)" "(seminarski.tfidf/get-preprocessed-data abc)" "(add-movie-attributes-with-factors data abc)" "(add-movie-attributes-with-factors abc)" "(let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n         final-vector (merge-vectors (\:tokens (process abc)) actors directors title genres)]\\r\\n     {\:_id (\:_id abc) \:tokens final-vector})" "(merge-with + {\\"happen\\" 1, \\"receiv\\" 1, \\"rob\\" 1, \\"min\\" 1, \\"call\\" 1, \\"monei\\" 1, \\"three\\" 1, \\"100,000\\" 1, \\"boyfriend\\" 1, \\"dm\\" 1, \\"20\\" 1, \\"train\\" 1, \\"lost\\" 1, \\"event\\" 1, \\"altern\\" 1, \\"rais\\" 1, \\"minor\\" 1, \\"gui\\" 1, \\"manni\\" 2, \\"belong\\" 1, \\"depend\\" 1, \\"amount\\" 1, \\"bad\\" 1, \\"phone\\" 1, \\"meet\\" 1, \\"will\\" 1, \\"lola\\" 3, \\"subwai\\" 1, \\"store\\" 1}\\n            {\\"nm0004376\\" 0.0, \\"nm0001953\\" 0.0, \\"nm0460578\\" 0.0, \\"nm0677899\\" 0.0} {\\"nm0878756\\" 0.0} {\\"lola\\" 0.0, \\"1998\\" 0.0} {\\"Crime\\" 0.0, \\"Thriller\\" 0.0})" "(defn mrg [& maps]\\n  (merge-with + maps))" "(mrg {\\"happen\\" 1, \\"receiv\\" 1, \\"rob\\" 1, \\"min\\" 1, \\"call\\" 1, \\"monei\\" 1, \\"three\\" 1, \\"100,000\\" 1, \\"boyfriend\\" 1, \\"dm\\" 1, \\"20\\" 1, \\"train\\" 1, \\"lost\\" 1, \\"event\\" 1, \\"altern\\" 1, \\"rais\\" 1, \\"minor\\" 1, \\"gui\\" 1, \\"manni\\" 2, \\"belong\\" 1, \\"depend\\" 1, \\"amount\\" 1, \\"bad\\" 1, \\"phone\\" 1, \\"meet\\" 1, \\"will\\" 1, \\"lola\\" 3, \\"subwai\\" 1, \\"store\\" 1}\\r\\n               {\\"nm0004376\\" 0.0, \\"nm0001953\\" 0.0, \\"nm0460578\\" 0.0, \\"nm0677899\\" 0.0} {\\"nm0878756\\" 0.0} {\\"lola\\" 0.0, \\"1998\\" 0.0} {\\"Crime\\" 0.0, \\"Thriller\\" 0.0})" "(let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n         final-vector (merge-vectors (\:tokens (process abc)) actors directors title genres)]\\r\\n     {\:_id (\:_id abc) \:tokens final-vector})" "(let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n         final-vector (merge-vectors (\:tokens (process abc)) actors directors title genres)]\\r\\n     genres)" "(add-movie-attributes-with-factors abc)" "(create-vector-for-tfidf abc)" "(prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)" "(let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n         final-vector (merge-vectors (\:tokens (process abc)) actors directors title genres)]\\r\\n     {\:_id (\:_id abc) \:tokens final-vector})" "(let [sum (reduce + (vals (\:tokens abc)))\\r\\n         actors (prepare-attributes sum (get-cast-list (\:actors abc)) 0.05)\\r\\n         directors (prepare-attributes sum (get-cast-list (\:directors abc)) 0.05)\\r\\n         title (prepare-attributes sum (get-title-processed (\:title abc)) 0.03)\\r\\n         genres (prepare-attributes sum (\:genres abc) 0.05)\\r\\n         final-vector (merge-vectors (\:tokens (process abc)) actors directors title genres)]\\r\\n     actors)" "(\:tokens abc)" "(create-vector-for-tfidf abc)" "(seminarski.calculations/test-preprocess)" "(seminarski.config/init)" "(seminarski.config/calculate-recommendations)" "(count (range 1 12000))" "(count (into [] (range 1 12000)))" "(seminarski.config/calculate-recommendations2)" "(def abctest (seminarski.db/get-by-id \\"movies\\" 187))" "abctest" "(seminarski.tfidf/calculate-tfidf-for-all abctest abctest)" "(seminarski.tfidf/calculate-tfidf-for-all (seminarski.tfidf/get-preprocessed-data abctest) (seminarski.tfidf/get-preprocessed-data abctest))" "(def pabc (vector abctest))" "pabc" "(def pabc (seminarski.tfidf/get-preprocessed-data pabc))" "pabc" "(seminarski.tfidf/calculate-tfidf-for-all pabc pabc)" "(defn corp (seminarski.db/get-data-pagination \\"movies\\" 1 10))" "(def corp (seminarski.db/get-data-pagination \\"movies\\" 1 10))" "corp" "(def voc (conj corp abctest))" "voc" "(def pabc (vector abctest))" "(def pabc (seminarski.tfidf/get-preprocessed-data pabc))" "pabc" "(defn pvoc (seminarski.tfidf/get-preprocessed-data voc))" "(def pvoc (seminarski.tfidf/get-preprocessed-data voc))" "pvoc" "(seminarski.tfidf/calculate-tfidf-for-all pabc pvoc)" "(seminarski.calculations/calculate-similarities (seminarski.db/get-data-pagination \\"movies\\" 1 10))" "(def stef \\n  (let [a 4\\n        b 5]\\n    (* a b)))" "stef" "(def stef \\n  (let [a 4\\n        b 5]\\n    (do\\n      (println \\"Stef\\")\\n    (* a b))))" "stef" "(seminarski.calculations/calculate-similarities (seminarski.db/get-data-pagination \\"movies\\" 1 100))" "(time (seminarski.calculations/calculate-similarities (seminarski.db/get-data-pagination \\"movies\\" 1 100)))" "(time (seminarski.calculations/calculate-similarities (seminarski.db/get-data-pagination \\"movies\\" 1 500)))" "(time (seminarski.calculations/calculate-similarities (seminarski.db/get-data-pagination \\"movies\\" 1 1000)))" "(time (seminarski.calculations/calculate-similarities (seminarski.db/get-data \\"movies\\")))" "(println \\"stef\\")" "(time (seminarski.calculations/calculate-similarities (seminarski.db/get-data \\"movies\\")))" "(def test (into [] (range 1 4000)))" "(sort test)" "(take 10 (sort test))" "(time (seminarski.calculations/calculate-similarities (seminarski.db/get-data \\"movies\\")))" "(def testdata (seminarski.db/get-data-pagination \\"movies\\" 1 50))" "(def testdata (seminarski.tfidf/get-preprocessed-data testdata))" "testdata" "(seminarski.tfidf/calculate-tfidf-for-all testdata testdata \:log)" "(merge-with + {\:stef 4 \:nesto 3} {\:stef 5 \:nesto 1 \:stef 3})" "(frequencies '(1 3 4 1 1 3 4 1 1 1 3))" "(* 2 3 4)" "(reduce \\r\\n     \#(let [[k v] %2] (assoc %1 k (* 0.5 30 v))) {} {\:s 2, \:t 3, \:e 4, \:f 6})" "testdata" "(def testdata (seminarski.db/get-data-pagination \\"movies\\" 1 50))" "testdata" "(seminarski.tfidf/create-vector-for-tfidf (fist testdata))" "(seminarski.tfidf/create-vector-for-tfidf (first testdata))" "(process-single-document (\:title (first testdata)))" "(seminarski.tfidf/process-single-document (\:title (first testdata)))" "(seminarski.tfidf/get-weighted-attributes 30 (seminarski.tfidf/process-single-document (\:title (first testdata))) 0.05)" "(seminarski.tfidf/create-vector-for-tfidf (first testdata))" "(count (filter \#(contains? (\:tokens %) \:stef) [{\:stef 1 \:s 4 \:t 5 \:e 8 \:f 9} {\:s 4 \:t 5 \:e 8 \:f 9} {\:s 4 \:t 5 \:e 8 \:f 9}]))" "(count (filter \#(contains? (\:tokens %) \:stef) [{\:_id 1 \:tokens {\:stef 1 \:s 4 \:t 5 \:e 8 \:f 9}} {\:_id 2 \:tokens {\:s 4 \:t 5 \:e 8 \:f 9}} {\:_id 3 \:tokens {\:s 4 \:t 5 \:e 8 \:f 9}}]))" "(count (filter \#(contains? (\:tokens %) \:stef) [{\:_id 1 \:tokens {\:stef 1 \:s 4 \:t 5 \:e 8 \:f 9}} {\:_id 2 \:tokens {\:s 4 \:t 5 \:e 8 \:f 9}} {\:_id 3 \:tokens {\:stef 4 \:s 4 \:t 5 \:e 8 \:f 9}}]))" "(count (filter \#((\:tokens %) \:stef) [{\:_id 1 \:tokens {\:stef 1 \:s 4 \:t 5 \:e 8 \:f 9}} {\:_id 2 \:tokens {\:s 4 \:t 5 \:e 8 \:f 9}} {\:_id 3 \:tokens {\:stef 4 \:s 4 \:t 5 \:e 8 \:f 9}}]))" "(count (filter \#((\:tokens %) \\"stef\\") [{\:_id 1 \:tokens {\\"stef\\" 1 \\"s\\" 4 \\"t\\" 5 \\"e\\" 8 \\"f\\" 9}} {\:_id 2 \:tokens {\\"s\\" 4 \\"t\\" 5 \\"e\\" 8 \\"f\\" 9}} {\:_id 3 \:tokens \\n                                                                                                                                      {\\"stef\\" 4 \\"s\\" 4 \\"t\\" 5 \\"e\\" 8 \\"f\\" 9}}]))" "(seminarski.tfidf/create-vector-for-tfidf (first testdata))" "(defn get-db-field-for-similarities []\\r\\n  \:similar-log)" "{get-db-field-for-similarities 3}" "(defn get-db-field-for-similarities []\\r\\n  '\:similar-log)" "{get-db-field-for-similarities 3}" "(defn get-db-field-for-similarities []\\r\\n  \#'\:similar-log)" "(defn get-db-field-for-similarities []\\r\\n  \\"similar-log\\")" "{(keyword get-db-field-for-similarities) 3}" "{(keyword (get-db-field-for-similarities)) 3}" "(def testdata (seminarski.db/get-data-pagination \\"movies\\" 1 1))" "testdata" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer (\:description testdata)))" "(seminarski.tfidf/tokenizer (\:description testdata))" " (\:description testdata)" " (\:description (first testdata))" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer (\:description (first testdata))))" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer (seminarski.tfidf/transform-to-lowercase (\:description (first testdata)))))" "(seminarski.tfidf/tokenizer (seminarski.tfidf/transform-to-lowercase (\:description (first testdata))))" "(def abc \\"Stefan Vuckovic is the best, Stefan is great, Stefan\\")" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc))" "(seminarski.tfidf/tokenizer abc)" "(def abc \\"Harry Potter is the best, Stefan is great, Stefan\\")" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc))" "(def abc \\"Harry Potter is the best, Harry is great, Harry\\")" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc))" "(remove (set (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc))) abc)" "(set (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc)))" "(remove (set (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc))) (seminarski.tfidf/tokenizer abc))" "(remove (set (seminarski.tfidf/tokenizer (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc)))) (seminarski.tfidf/tokenizer abc))" "(seminarski.tfidf/tokenizer (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc)))" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc))" "(seminarski.tfidf/tokenizer (interpose \\" \\" (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc))))" "(interpose \\" \\" (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc)))" " (apply str (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc)))" "(apply str (interpose \\" \\" (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc))))" "(remove (set (seminarski.tfidf/tokenizer (apply str (interpose \\" \\" (seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer abc)))))) (seminarski.tfidf/tokenizer abc))" "(seminarski.tfidf/get-person-names abc)" "(seminarski.tfidf/filter-person-names abc)" "(seminarski.tfidf/transform-to-lowercase (seminarski.tfidf/get-person-names abc))" "(seminarski.tfidf/transform-to-lowercase \\"Nesto Nesto \\")" "( map seminarski.tfidf/transform-to-lowercase (seminarski.tfidf/get-person-names abc))" "(seminarski.tfidf/process-single-document abc)" "(seminarski.tfidf/process-single-document (first testdata))" "(seminarski.tfidf/process-single-document (\:description (first testdata)))" "(def testdata (seminarski.db/get-by-id \\"movies\\" 342))" "testdata" "(seminarski.tfidf/process-single-document (\:description (first testdata)))" "(seminarski.tfidf/process-single-document (\:description testdata))" "(seminarski.tfidf/get-sentences (\:description testdata))" "(map \#(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer %)) (seminarski.tfidf/get-sentences (\:description testdata)))" "(def a \\"stef\\")" "a" "(alter-var-root '\#a \\"st\\")" "(alter-var-root \#'a \\"st\\")" "(println a)" "(seminarski.config/get-global-settings)" "(seminarski.config/set-global-settings {\:database-field-for-similarity \\"db\\" \:tfidf-variation \\"log\\"})" "(seminarski.config/get-global-settings)" "(seminarski.config/set-global-settings {\:database-field-for-similarity \\"db\\" \:tfidf-variation \\"log\\"})" "(seminarski.config/get-global-settings)" "(seminarski.config/get-reviews-from-api)" "(seminarski.parser/get-movie-reviews-from-api 187)" "(seminarski.getdatafromurl/get-data \\"https\://yts.to/api/v2/movie_reviews.json?movie_id\=10\\")" "(seminarski.getdatafromurl/get-data \\"https\://yts.to/api/v2/movie_reviews.json?movie_id\=10\\" {})" "(seminarski.parser/get-movie-reviews-from-api 10)" "(seminarski.getdatafromurl/get-data \\"https\://yts.to/api/v2/movie_reviews.json?movie_id\=10\\" {})" "(seminarski.parser/get-movie-reviews 10)" "(seminarski.config/get-reviews-from-api)" "(seminarski.scraping/parse-reviews 187)" "(seminarski.scraping/parse-reviews \\"tt0089869\\")" "(map \:content (seminarski.scraping/parse-reviews \\"tt0089869\\"))" "(map html/text (seminarski.scraping/parse-reviews \\"tt0089869\\"))" "(seminarski.scraping/parse-reviews \\"tt0089869\\")" "(def a (seminarski.scraping/parse-reviews \\"tt0089869\\"))" "(first a)" "(first (rest a))" "(seminarski.config/get-reviews-from-api)" "(seminarski.scraping/parse-reviews \\"tt0089869\\")" "(type {})" "(seminarski.scraping/parse-reviews \\"tt0089869\\")" "(remove \#(\= type clojure.lang.PersistentArrayMap) [3 3 4 {} 3 {}])" "(remove (\= type clojure.lang.PersistentArrayMap) [3 3 4 {} 3 {}])" "(remove (fn [] (\= type clojure.lang.PersistentArrayMap)) [3 3 4 {} 3 {}])" "(remove \#(\= (type %) clojure.lang.PersistentArrayMap) [3 3 4 {} 3 {}])" "(seminarski.scraping/parse-reviews \\"tt0089869\\")" "(type {\:stef 1 \:s 4})" "(seminarski.scraping/parse-reviews \\"tt0089869\\")" "(last [1 2 3 4])" "(clojure.string/trim-newline (seminarski.scraping/parse-reviews \\"tt0089869\\"))" "(map clojure.string/trim-newline (seminarski.scraping/parse-reviews \\"tt0089869\\"))" "(seminarski.config/get-reviews-from-api)" "(clojure.string/replace \\"Stefan je car\\" \\"car\\" \\"\\")" "(println \\"stef\\")" "(clojure.string/replace \\"stef je car\\" \\"car\\" \\"\\")" "(clojure.string/replace \\"stef je car\\" \#\\"car\\" \\"\\")" "(clojure.string/replace \\"stefcar je car\\" \#\\"car\\" \\"\\")" "(clojure.string/replace \\"stefcar je car\\" \\"car\\" \\"\\")" "(clojure.string/replace \\"/nstefcar je car/n/n\\" \\"/n\\" \\"\\")" "(seminarski.scraping/parse-reviews \\"tt0089869\\")" "(clojure.string/replace \\"\\\\n\\\\nAn engaging sci-fi drama about a man who awakens to find himself, seemingly,\\\\nthe last person alive on earth. What does he do? What would you do?\\\\nEverything's free. You could drive what you want. Wear what you want. Live\\\\nin the fanciest hotel or simply pick a house to move in to. No laws to obey\\\\nexcept those imposed by reality.But might it not get lonely?\\" \\"/n\\" \\"\\")" "(seminarski.scraping/parse-reviews \\"tt0089869\\")" "(seminarski.scraping/parse-reviews \\"tt1229822\\")" "(seminarski.config/get-reviews-from-api)" "(.startsWith \\"stef\\" \\"st\\")" "(.startsWith \\"stef\\" \\" st\\")" "(.startsWith \\" stef\\" \\"st\\")" "(.startsWith (trim \\" stef\\") \\"st\\")" "(.startsWith (clojure.string/trim \\" stef\\") \\"st\\")" "(seminarski.config/get-all-data [\\"_id\\" \\"imdb_code\\"])" "(seminarski.config/get-all-data [])" "(seminarski.db/get-data \\"movies\\")" "(seminarski.config/get-all-data [\\"_id\\" \\"imdb_code\\"])" "(seminarski.db/get-data \\"movies\\")" "(seminarski.db/get-data \\"movies\\" {\:_id 1})" "(seminarski.db/get-data \\"movies\\" \:condition {\:_id 1})" "(seminarski.db/get-data \\"movies\\" \:condition {\:_id 1} \:projection [\\"_id\\"])" "(seminarski.db/get-data \\"movies\\" \:projection [\\"_id\\"])" "(seminarski.config/get-reviews-from-api)" " (partition-all 200 (seminarski.config/get-all-data-projection [\\"_id\\" \\"imdb_code\\"]))" "(seminarski.scraping/parse-reviews \\"tt2246831\\")" "(seminarski.config/get-reviews-from-imdb)" "(println \\"stef)" "(seminarski.config/get-reviews-from-imdb)" "(apply str [\\"stef\\" \\"je\\" \\"car\\"])" "(interpose \\" \\" [\\"stef\\" \\"je\\" \\"car\\"])" "(str (interpose \\" \\" [\\"stef\\" \\"je\\" \\"car\\"]))" "(apply str (interpose \\" \\" [\\"stef\\" \\"je\\" \\"car\\"]))" "(clojure.string/join \\" \\" [\\"stef\\" \\"je\\" \\"car\\"])" "(def testdata (seminarski.db/get-by-id \\"movies\\" 342))" "testdata" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])\\r\\n(def strings [\\"the movie list\\" \\"this.is.a.string\\" \\"haha \:)\\"])\\r\\n(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % pattern \\"\\") strings))" "\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])\\r\\n(def strings [\\"the movie list\\" \\"this.is.a.string\\" \\"haha \:)\\"])\\r\\n(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % pattern \\" \\") strings))" "\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])\\r\\n(def strings [\\" The the movie list\\" \\"this.is.a.string\\" \\"haha \:)\\"])\\r\\n(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % pattern \\" \\") strings))" "\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])\\r\\n(def strings [\\" The the movie list\\" \\"this.is.a.string\\" \\"haha \:)\\"])\\r\\n(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/compile (java.util.regex.Pattern/quote %) java.util.regex.Pattern/CASE_INSENSITIVE)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % pattern \\" \\") strings))" "\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])\\r\\n(def strings [\\" The the movie list\\" \\"this.is.a.string\\" \\"haha \:)\\"])\\r\\n(let [pattern (->> forbidden-words (map \#(.matcher (java.util.regex.Pattern/compile (java.util.regex.Pattern/quote %) java.util.regex.Pattern/CASE_INSENSITIVE))) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % pattern \\" \\") strings))" "\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])\\r\\n(def strings [\\" The the movie list\\" \\"this.is.a.string\\" \\"haha \:)\\"])\\r\\n(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/compile (java.util.regex.Pattern/quote %) java.util.regex.Pattern/CASE_INSENSITIVE)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll (.matcher pattern %) \\" \\") strings))" "\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])\\r\\n(def strings [\\"the movie list\\" \\"this.is.a.string\\" \\"haha \:)\\"])\\r\\n(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % pattern \\"\\") strings))" "\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])\\r\\n(def strings [\\"The the movie list\\" \\"this.is.a.string\\" \\"haha \:)\\"])\\r\\n(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % (str \\"(?i)\\" pattern) \\" \\") strings))" "testdata" "(def testdata (seminarski.db/get-by-id \\"movies\\" 342))" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(seminarski.tfidf/tokenizer \\"stef.a\\")" "(seminarski.tfidf/tokenizer \\"stef.A\\")" "(seminarski.tfidf/tokenizer \\"stef.As\\")" "(seminarski.tfidf/tokenizer \\"John.As\\")" "(clojure.string/replace \#\\"[\\\\.]\\" \\"stef.a\\")" "(clojure.string/replace \\"stef.a\\" \#\\"[\\\\.]\\" \\" \\")" "(clojure.string/replace \\"stef...a\\" \#\\"[\\\\.]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f...a\\" \#\\"[\\\\.]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f...a\\" \#\\"[.]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f...a\\" \#\\"[.\\\\\\"]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"fk\\\\j...a\\" \#\\"[.\\\\\\"]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"fk\\\\\\\\j...a\\" \#\\"[.\\\\\\"]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"fk\\\\\\\\j...a\\" \#\\"[.\\\\\\\\s\\\\\\"\\\\\\\\s]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"fk\\\\\\\\j...a\\" \#\\"[.|\\\\\\"]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\"[.|\\\\\\"]\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\".|\\\\\\"\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\"\\\\.|\\\\\\"\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \\"\\\\.|\\\\\\"\\" \\" \\")" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\"\\\\.|\\\\\\"\\" \\" \\")" "(get-sw []\\n        \\"\\\\.|\\\\\\"\\")" "(defn get-sw []\\n        \\"\\\\.|\\\\\\"\\")" "(defn get-sw []\\n      (str  \\"\\\\.|\\\\\\"\\"))" "(seminarski.scraping/join-stop-words (seminarski.scraping/get-stop-words))" "\#(seminarski.scraping/join-stop-words (seminarski.scraping/get-stop-words))" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\"\\\\.|\\\\\\"\\" \\" \\")" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(clojure.string/replace \\"st\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\"\\\\.|\\\\\\"\\" \\" \\")" "(clojure.string/join \\" \\" (\:reviews testdata))" "(clojure.string/replace \\"s*t\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\"*|\\\\.|\\\\\\"\\" \\" \\")" "(clojure.string/replace \\"s*t\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\"\\\\*|\\\\.|\\\\\\"\\" \\" \\")" "(clojure.string/replace \\"s***t\\\\\\"e\\\\\\"f|k\\\\\\\\j...a\\" \#\\"\\\\*|\\\\.|\\\\\\"\\" \\" \\")" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(seminarski.scraping/remove-stop-words \\"kdsfjkdsjfkds dkjfksd kdjfs\\")" "(seminarski.scraping/remove-stop-words \\"kdsf***jkdsjfkds  spoilers dkjfksd \\\\\\"kdjfs\\\\\\"\\")" "testdata" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(seminarski.scraping/remove-stop-words \\"stef 'nesto'\\")" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(seminarski.scraping/remove-stop-words \\"stef 'nesto'\\")" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(clojure.string/join \\" \\" [])" "(seminarski.tfidf/tokenizer \\"\\")" "(seminarski.tfidf/name-finder [])" "(seminarski.tfidf/name-finder [\\"sdf\\" \\"SDF\\"])" "(merge-with + {\:stef 1 \:s 2} {})" "(def testdata (seminarski.db/get-by-id \\"movies\\" 1359))" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(take 2 [\\"stef\\" \\"s\\" \\"sdfd\\" \\"dfsd\\"])" "(clojure.string/join \\" \\" (take 2 [\\"stef\\" \\"s\\" \\"sdfd\\" \\"dfsd\\"]))" "(def testdata (seminarski.db/get-by-id \\"movies\\" 1359))" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(def testdata (seminarski.db/get-by-id \\"movies\\" 187))" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "testdata" "(defn b (seminarski.tfidf/tokenizer (\:description testdata)))" "(seminarski.tfidf/tokenizer (\:description testdata))" "(def b (seminarski.tfidf/tokenizer (\:description testdata)))" "(seminarski.tfidf/name-finder b)" "(seminarski.tfidf/name-finder [\\"John\\" \\"is\\" \\"working\\"])" "(seminarski.tfidf/create-vector-for-tfidf testdata)" "(seminarski.tfidf/get-sentences (\:description testdata))" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer (first (seminarski.tfidf/get-sentences (\:description testdata)))))" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer (first (rest (seminarski.tfidf/get-sentences (\:description testdata))))))" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer (first (rest (rest (seminarski.tfidf/get-sentences (\:description testdata)))))))" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer (first (rest (rest (rest (seminarski.tfidf/get-sentences (\:description testdata))))))))" "(seminarski.tfidf/name-finder (seminarski.tfidf/tokenizer (first (rest (rest (rest (rest (seminarski.tfidf/get-sentences (\:description testdata)))))))))" "(seminarski.tfidf/name-finder [\\"Lola\\" \\"is\\" \\"working\\"])" "(seminarski.tfidf/name-finder [\\"John\\" \\"is\\" \\"working\\"])" "(seminarski.tfidf/name-finder [\\"James\\" \\"is\\" \\"working\\"])" "(seminarski.tfidf/name-finder [\\"Stefan\\" \\"is\\" \\"working\\"])" "(seminarski.tfidf/name-finder [\\"Harry\\" \\"is\\" \\"working\\"])" "(seminarski.tfidf/filter-person-names [\\"John\\" \\"is\\" \\"working\\"])" "(seminarski.tfidf/filter-person-names2 [\\"John\\" \\"is\\" \\"working\\"])" "(set '(\\"John\\" \\"James\\" \\"Stefan\\"))" "(set '(\\"John\\" \\"James\\" \\"Stefan\\" \\"Stefan\\"))" "(remove \#{\\"stef\\" \\"s\\" \\"t\\"} {\\"stef\\" 1 \\"s\\" 4 \\"st\\" 5 \\"ef\\" 6 \\"t\\" 87})" "(\#{\\"stef\\" \\"s\\" \\"t\\"} [\\"stef\\" 1])" "(apply dissoc {\\"stef\\" 1 \\"s\\" 4 \\"st\\" 5 \\"ef\\" 6 \\"t\\" 87} '(\\"James\\" \\"John\\" \\"Stefan\\"))" "(apply dissoc {\\"stef\\" 1 \\"s\\" 4 \\"st\\" 5 \\"ef\\" 6 \\"t\\" 87} '(\\"stef\\" \\"s\\" \\"t\\"))" "(clojure.set/difference \#{1 2 3} \#{1})" "(clojure.set/difference \#{\\"stef\\" \\"s\\" \\"t\\"} \#{\\"s\\" \\"dsf\\"})" "(seminarski.tfidf/get-all-terms-with-frequencies [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4}}])" "(seminarski.tfidf/get-all-terms-with-frequencies [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4}} {\:_id 3 \:tokens {\\"stef\\" 2 \\"s\\" 4}}])" "(seminarski.tfidf/get-all-terms-with-frequencies [])" "(seminarski.tfidf/get-all-terms-with-frequencies [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}}])" "(seminarski.tfidf/get-all-terms-with-frequencies [ {\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} ])" "(seminarski.tfidf/get-all-terms-with-frequencies [\\"stef\\" \\"ste\\"])" "(seminarski.tfidf/get-all-terms-with-frequencies [\\"stef\\"])" "(seminarski.tfidf/get-all-terms-with-frequencies \\"stef\\")" "(seminarski.tfidf/get-all-terms-with-frequencies {})" "(seminarski.tfidf/get-all-terms-with-frequencies {\:stef 1})" "(seminarski.tfidf/get-all-terms {\:stef 1})" "(seminarski.tfidf/get-all-terms [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4}}])" "(defn get-all-terms-with-frequencies [all-docs]\\r\\n  (reduce \#(merge-with + (\:tokens %)) {} all-docs))" "(get-all-terms-with-frequencies [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4}}])" "(seminarski.tfidf/get-all-terms-with-frequencies [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4}}])" " (reduce \#(merge-with + (\:tokens %)) {} [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4}}])" " (reduce \#(merge-with + %1 (\:tokens %2)) {} [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4}}])" " (reduce \#(merge-with + %1 (\:tokens %2)) {} [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4 \\"s\\" 7}}])" "(seminarski.tfidf/get-all-terms-with-frequencies [{\:_id 1 \:tokens {\\"stef\\" 2 \\"s\\" 4}} {\:_id 2 \:tokens {\\"stef\\" 6 \\"st\\" 4}}])" "(def testdata2 (seminarski.db/get-data-pagination \\"movies\\" 1 2 nil nil))" "testdata2" "(seminarski.tfidf/get-all-terms-with-frequencies testdata2)" "(def b (map \#(seminarski.tfidf/create-vector-for-tfidf %) testdata2))" "b" "(seminarski.tfidf/get-all-terms-with-frequencies b)" "(seminarski.tfidf/get-all-terms b)" "(Math/ceil 3.2)" "(take 4.0 [\\"stef\\" \\"s\\" \\"t\\" \\"e\\" \\"f\\" \\"n\\"])" "(take-last 4.0 [\\"stef\\" \\"s\\" \\"t\\" \\"e\\" \\"f\\" \\"n\\"])" "(sort {\\"stef\\" 4 \\"s\\" 2 \\"st\\" 7 \\"t\\" 6})" "(sort-by val {\\"stef\\" 4 \\"s\\" 2 \\"st\\" 7 \\"t\\" 6})" "(dissoc {\\"stef\\" 1 \\"s\\" 2 \\"st\\" 3} \#{\\"s\\" \\"st\\"})" "(apply dissoc {\\"stef\\" 1 \\"s\\" 2 \\"st\\" 3} \#{\\"s\\" \\"st\\"})" "b" "(update-in b [\:tokens] apply dissoc \#{\\"fifti\\" \\"leav\\" \\"confus\\"})" "(update-in b [\:tokens] \#(apply dissoc % \#{\\"fifti\\" \\"leav\\" \\"confus\\"}))" "(update-in (first b) [\:tokens] \#(apply dissoc % \#{\\"fifti\\" \\"leav\\" \\"confus\\"}))" "(map (update-in % [\:tokens] \#(apply dissoc % \#{\\"fifti\\" \\"leav\\" \\"confus\\"})) b)" "(map (update-in %1 [\:tokens] \#(apply dissoc %2 \#{\\"fifti\\" \\"leav\\" \\"confus\\"})) b)" "(defn test-fn [col]\\n  (apply dissoc col \#{\\"fifti\\" \\"leav\\" \\"confus\\"}))" "(map (update-in % [\:tokens] test-fn) b)" "(map \#(update-in % [\:tokens] \#(apply dissoc % \#{\\"fifti\\" \\"leav\\" \\"confus\\"})) b)" "(map \#(update-in % [\:tokens] test-fn) b)" "b" "(defn test-fn [col]\\n  (apply dissoc col \#{\\"fifti\\" \\"leav\\" \\"confus\\" \\"halloween\\"}))" "(map \#(update-in % [\:tokens] test-fn) b)" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "b" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (cljset/difference (set (keys all-terms)) (words-to-remove))\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove))]\\n   removal-percentage)" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) (words-to-remove))\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove))]\\n   removal-percentage)" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        ]\\n   removal-percentage)" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        ]\\n   (keys all-terms))" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        ]\\n   (set (keys all-terms)))" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove))]\\n   removal-percentage)" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) movies)]\\n   removal-percentage)" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)]\\n   removal-percentage)" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)]\\n   movies)" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)]\\n   all-terms)" " (let [all-terms (sort-by val (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)]\\n   words-to-remove)" "(merge-with + {\\"stef\\" 2} {\\"stef\\" 3})" "(sort-by val (merge-with + {\\"stef\\" 2} {\\"stef\\" 3}))" " (let [all-terms (into (sorted-map) (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (take removal-percentage all-terms) (take-last removal-percentage all-terms)))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)]\\n   all-terms)" "(let [results {\:A 1 \:B 2 \:C 2 \:D 5 \:E 1 \:F 1}]\\r\\n  (into (sorted-map-by (fn [key1 key2]\\r\\n                         (compare (get results key2)\\r\\n                                  (get results key1))))\\r\\n        results))" "(let [results {\:A 1 \:B 2 \:C 2 \:D 5 \:E 1 \:F 1}]\\r\\n  (into (sorted-map-by (fn [key1 key2]\\r\\n                         (compare [(get results key2) key2]\\r\\n                                  [(get results key1) key1])))\\r\\n        results))" "(let [results {\:A 1 \:B 2 \:C 2 \:D 5 \:E 1 \:F 1}]\\r\\n  (into (sorted-map-by > (fn [key1 key2]\\r\\n                         (compare [(get results key2) key2]\\r\\n                                  [(get results key1) key1])))\\r\\n        results))" "(let [results {\:A 1 \:B 2 \:C 2 \:D 5 \:E 1 \:F 1}]\\r\\n  (into (sorted-map-by  (fn [key1 key2]\\r\\n                         (compare [(get results key2) key2]\\r\\n                                  [(get results key1) key1])) >)\\r\\n        results))" "(let [results {\:A 1 \:B 2 \:C 2 \:D 5 \:E 1 \:F 1}]\\r\\n  (into (sorted-map-by  (fn [key1 key2]\\r\\n                         (compare \\r\\n                                  [(get results key1) key1]\\n                                  [(get results key2) key2])))\\r\\n        results))" "(seminarski.tfidf/sort-fn {\:A 1 \:B 2 \:C 2 \:D 5 \:E 1 \:F 1})" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies vocabulary))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (cljset/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) movies)\\r\\n        idfs (seminarski.tfidf/get-all-idfs vocabulary voc)]\\r\\n    words-to-remove)" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (cljset/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs vocabulary voc)]\\r\\n    words-to-remove)" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs vocabulary voc)]\\r\\n    words-to-remove)" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs b voc)]\\r\\n    words-to-remove)" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs b voc)]\\r\\n    idfs)" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs movies-final voc)]\\r\\n    words-to-remove)" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs movies-final voc)]\\r\\n    idfs)" "b" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs movies-final voc)]\\r\\n    words-to-remove)" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(def b (seminarski.tfidf/create-vector-for-tfidf testdata2))" "(def b (map \#(seminarski.tfidf/create-vector-for-tfidf %) testdata2))" "b" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs movies-final voc)]\\r\\n    words-to-remove)" "testdata2" "(count (first b))" "(count (\:tokens (first b)))" "(reduce + (vals (\:tokens (first b))))" "(\:tokens (second testdata2))" "(second testdata2)" "(\:tokens (second b))" "(count (seminarski.tfidf/process-single-document (\:description (second testdata2))))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(seminarski.tfidf/create-vector-for-tfidf (first b))" "(seminarski.tfidf/create-vector-for-tfidf (first testdata2))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(Double/parseDouble 10)" "(Double/parseDouble (String/valueOf 10))" "((double) 10)" "(double 10)" "(double \\"DF\\")" "(double 10.6)" "(double 0.02)" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(def testdata2 (seminarski.db/get-data-pagination \\"movies\\" 1 2 nil nil))" "(def b (map \#(seminarski.tfidf/create-vector-for-tfidf %) testdata2))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [all-terms (seminarski.tfidf/sort-fn (seminarski.tfidf/get-all-terms-with-frequencies b))\\r\\n        removal-percentage (Math/ceil (* 0.02 (count all-terms)))\\r\\n        words-to-remove (set (into (keys (take removal-percentage all-terms)) (keys (take-last removal-percentage all-terms))))\\r\\n        voc (clojure.set/difference (set (keys all-terms)) words-to-remove)\\r\\n        movies-final (map \#(update-in % [\:tokens] seminarski.tfidf/remove-words words-to-remove) b)\\r\\n        idfs (seminarski.tfidf/get-all-idfs movies-final voc)]\\r\\n    words-to-remove)" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(seminarski.settings/cutoff)" "seminarski.settings/cutoff" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "seminarski.settings/cutoff" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(let [config (seminarski.config/get-json-from-file (seminarski.config/get-config-file))]\\r\\n    (do\\r\\n      (seminarski.config/set-global-settings config)))" "(seminarski.tfidf/calculate-tfidf-for-all b b \:aug)" "(str \\"stef\\" 1.4 \\"nesto\\")" "(defn get-data-from-file [file]\\r\\n  (read-string (slurp file)))" "(def a (get-data-from-file \\"conf/idf0.02.edn\\"))" "(def abv (get-data-from-file \\"conf/idf0.02.edn\\"))" "(def abv (get-data-from-file \\"conf/tfidfaug.edn\\"))" "(def abv (seminarski.config/get-data-from-file \\"conf/tfidfaug.edn\\"))" "(def abv (seminarski.config/get-data-from-file \\"conf/data.edn\\"))" "abv" "(def a [1 2 3])" "a" "(def abv (seminarski.config/get-data-from-file \\"conf/tfidflog.edn\\"))" "abv" "(def ab (seminarski.config/get-data-from-file \\"conf/idf0.02\\"))" "(def ab (seminarski.config/get-data-from-file \\"conf/idf0.02.edn\\"))" "(with-open [rdr (clojure.java.io/reader \\"/conf/idf0.02.edn\\")]\\r\\n         (count (line-seq rdr)))" "(with-open [rdr (clojure.java.io/reader \\"conf/idf0.02.edn\\")]\\r\\n         (count (line-seq rdr)))" "(slurp \\"conf/idf0.02.edn\\")" "(read-string (slurp \\"conf/idf0.02.edn\\"))" "(clojure.edn/read-string (slurp \\"conf/idf0.02.edn\\"))" "'use clojure.tools.reader.edn" "(read-string (slurp \\"conf/idf0.02.edn\\"))" "(into {} (read-string (slurp \\"conf/idf0.02.edn\\")))" "(count (read-string (slurp \\"conf/idf0.02.edn\\")))" "(def ab (read-string (slurp \\"conf/idf0.02.edn\\")))" "(def ab (partition 2 ab))" "ab" "(def abc (reduce \#(assoc %1 (first %2) (second %2)) {} ab))" "abc" "(count abc)" "(def abcd (range 1 386260000))" "abcd" "(use 'incanter.core)" "(def foo (matrix (range 89000) 4343))" "foo" "(requierinca" "(seminarski.lsa/calc-svd seminarski.lsa/foo)" "(seminarski.lsa/calc-svd (matrix (range 89000) 4343))" "(def a (seminarski.lsa/calc-svd (matrix (range 89000) 4343)))" "(\:S a)" "(diag (\:S a))" "(mmult (\:V a) (\:S a))" "(mmult (\:V a) (diag (\:S a)))" "(def a (seminarski.lsa/calc-svd (matrix (range 89000) 4343)))" "a" "(seminarski.lsa/get-reduced-v-matrix a)" "(mmult (seminarski.lsa/get-reduced-v-matrix a) (\:S a))" "(mmult (seminarski.lsa/get-reduced-v-matrix a) (diag (\:S a)))" "(def a (seminarski.lsa/calc-svd (matrix (range 386260000) 4343)))" "(def a (seminarski.lsa/mtrx 386260000 4343))" "(take 10 (repeatedly 0))" "(take 10 (repeat 0))" "(def ran (into [] (take 100000000 (repeat 0)) (range 1 100000000) (take 186260000 (repeat 0))))" "(def ran (reduce \#(into %1 %2) [(take 100000000 (repeat 0)) (range 1 100000000) (take 186260000 (repeat 0))]))" "(def a (seminarski.lsa/mtrx 386260000 4343))" "(def a (seminarski.lsa/mtrx 86860000 4343))" "(count (read-string (slurp \\"conf/idf0.02.edn\\")))" "(def a (seminarski.lsa/mtrx 130290000 4343))" "(def a (seminarski.lsa/mtrx 86860000 4343))" "(use 'midje.repl)" "(doc midje)" "'(doc midje)" "(autotest)" "(use 'midje.repl)" "(autotest)" "(load-facts)" "(use 'midje.repl)" "(autotest)" "(load-facts)" "(autotest \:pause)" "(autotest \:resume)" "(autotest \:pause)" "(autotest \:resume)" "(autotest \:pause)" "(autotest \:resume)" "(autotest \:pause)" "(autotest \:resume)" "(/ 70 70.3562363974)" "(seminarski.recommendation.similarity/calculate-parameters-for-cosine-similarity [1 2 3 4 5] [2 3 4 5 6])" "(Math/sqrt 90.0)" "(Math/sqrt 55.0)" "(* (Math/sqrt 90.0) (Math/sqrt 55.0))" "(/ 70 70.35623639735144)" "(autotest \:resume)" "(use 'midje.repl)" "(autotest)" "(if (nil)\\r\\n    (+ 0.4 (* 0.6 (/ nil 2)))\\r\\n    0)" "(if nil\\r\\n    (+ 0.4 (* 0.6 (/ nil 2)))\\r\\n    0)" "(seminarski.recommendation.calculations/tfidf)" "(class 0.0)" "(class (double 0.0))" "(class 0)" "(class ^long 2)" "(class (^long 2))" "(defn vector-histogram\\r\\n[data]\\r\\n(reduce (fn [hist v]\\r\\n(update-in hist [v] inc))\\r\\n(vec (repeat 10 0))\\r\\ndata))" "(def data (doall (repeatedly 1e6 \#(rand-int 10))))" "data" "(time (vector-histogram data))" "(defn array-histogram\\r\\n[data]\\r\\n(vec\\r\\n(reduce (fn [^longs hist v]\\r\\n(aset hist v (inc (aget hist v)))\\r\\nhist)\\r\\n(long-array 10)\\r\\ndata)))" "(time (array-histogram data))" "(update in (repeat 10 0) [12345] inc)" "(update-in (repeat 10 0) [12345] inc)" "(update-in (vec (repeat 10 0)) [12345] inc)" "(update-in (vec (repeat 10 0)) [0] inc)" "(take 10 data)" "(long-array 10)" "(seminarski.data.parser/get-movies)" "(seminarski.data.getdatafromurl/get-data \\"https\://yts.to/api/v2/list_movies.json\\")" "(seminarski.data.getdatafromurl/get-data \\"https\://yts.to/api/v2/list_movies.json\\" {})" "(seminarski.data.getdatafromurl/get-data \\"https\://yts.to/api/v2/list_movies.json\\" {\\"limit\\" 10, \\"page\\" 1})"]
eclipse.preferences.version=1
