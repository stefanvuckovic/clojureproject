cmdhistory=["(require '[clj-http.client \:as client])" "(client/get \\"https\://yts.to/api/v2/movie_details.json?movie_id\=4396\\")\\n\\r\\n(client/get \\"https\://yts.to/api/v2/movie_details.json?movie_id\=4396\\")" "(\:body (client/get \\"https\://yts.to/api/v2/movie_details.json?movie_id\=4396\\"))" "(\:require [clj-http.client \:as client])" "\:require [clj-http.client \:as client]" "(require [clj-http.client \:as client])" "(require clj-http.client \:as client)" "(require 'clj-http.client \:as client)" "(require '[clj-http.client \:as client])" "(client/get \\"http\://elitecashfunnel.com\\" \\n            {\:query-params {\:a {\:b {\:c 5} \:e {\:f 6}}}})" "(defn get-limit-listmoviesapi [] (\\r\\n  50\\r\\n)" "> (defn get-limit-listmoviesapi [] (\\r\\n     (50)\\r\\n   )" "(defn get-limit-listmoviesapi [] (\\r\\n        (str 50)\\r\\n      )" "(defn get-limit-listmoviesapi [] (\\r\\n           (str \\"50\\")\\r\\n         )" "(defn get-url-listmoviesapi [] (\\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)" "(println 1)" "(defn get-api-key []\\r\\n  (str \\"cfu7ks8sbc9yur4sts9zayyx\\")\\r\\n  )" "defn getdata [url, params] (\\r\\n  (let [formattedparams {\:query-params params}]\\r\\n    (\:body (client/get url formattedparams)   \\r\\n  )\\r\\n)" "(defn getdata [url, params] (\\r\\n  (let [formattedparams {\:query-params params}]\\r\\n    (\:body (client/get url formattedparams))  \\r\\n  )\\r\\n))" "(defn get-limit-listmoviesapi [] (\\r\\n  50\\r\\n))" "(get-limit-listmoviesapi)" "(defn get-limit-listmoviesapi [] \\r\\n     50\\r\\n   )" "(get-limit-listmoviesapi)" "(defn get-movies [] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" get-limit-listmoviesapi, \\"page\\" 1 })]\\n        apidata))" "(require '[seminarski.getdatafromurl \:as gd])" "(defn get-movies [] \\r\\n     (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" get-limit-listmoviesapi, \\"page\\" 1 })]\\r\\n           apidata))" "(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)" "(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)" " (defn get-movies [] \\r\\n        (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" get-limit-listmoviesapi, \\"page\\" \\"1\\" })]\\r\\n              apidata))" "(get-movies)" "(defn get-movies [] \\r\\n           (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" \\"1\\" })]\\r\\n                 apidata))" "(get-movies)" "(defn get-movies [] \\r\\n              (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" \\"4\\" })]\\r\\n                    apidata))" "(get-movies)" "(require '[cheshire.core \:refer \:all \:as ch])" "(require '[cheshire.core \:as ch])" "(require '[cheshire.core \:refer \:all \:as ch])" "(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)" "(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)" "(defn get-movies [] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" \\"4\\" })]\\r\\n    (ch/parse-string apidata true))\\r\\n)" "(require '[seminarski.getdatafromurl] \:as gd)" "(require '[seminarski.getdatafromurl \:as gd])" "(defn get-movies [] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" \\"4\\" })]\\r\\n    (ch/parse-string apidata true))\\r\\n)" "(get-movies)" "(def a [1 2 3 4 5 6 7])" "(map println a)" "(dorun (map println a))" "(doall (map println a))" "(defn get-movies [] \\r\\n     (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 })]\\r\\n       (ch/parse-string apidata true))\\r\\n   )" "(get-movies)" "(conj [1 2 3] [5 6 7])" "(defn get-movies1 [] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n      (let [movies (\:movies (\:data apidata))]\\r\\n        (doall (map get-movie-details (\:id movies))))))\\r\\n)" "(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)" "(defn get-movie-details [id]\\r\\n  (let [movie (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" id, \\"with_casts\\" true}))] \\r\\n    (if(\= (\:status movie) \\"ok\\")\\r\\n      (let [mv (\:data apidata)]  \\r\\n        mv)))\\r\\n)" "(defn get-movie-details [id]\\r\\n     (let [movie (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" id, \\"with_casts\\" true}))] \\r\\n       (if(\= (\:status movie) \\"ok\\")\\r\\n         (let [mv (\:data movie)]  \\r\\n           mv)))\\r\\n   )" "(defn get-movies1 [] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n      (let [movies (\:movies (\:data apidata))]\\r\\n        (doall (map get-movie-details (\:id movies))))))\\r\\n)" "(get-movies1)" "(defn get-movies1 [] \\r\\n     (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n       (if(\= (\:status apidata) \\"ok\\")\\r\\n         (let [movies (\:movies (\:data apidata))]\\r\\n           movies)))\\r\\n   )" "(get-movies1)" "(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" (\:id movie), \\"with_casts\\" true}))] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (let [mv (\:data mov)]  \\r\\n        mv)))\\r\\n)" "(defn get-movies1 [] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n      (let [movies (\:movies (\:data apidata))]\\r\\n        (doall (map get-movie-details movies)))))\\r\\n)" "(get-movies1)" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n     (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" (\:id movie), \\"with_casts\\" \\"true\\"}))] \\r\\n       (if(\= (\:status mov) \\"ok\\")\\r\\n         (let [mv (\:data mov)]  \\r\\n           mv)))\\r\\n   )" "(get-movie-details {\:id 1})" "(get-movie-details {\:id 10})" "(defn get-movie-details [movie]\\r\\n        (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" (\:id movie), \\"with_cast\\" \\"true\\"}))] \\r\\n          (if(\= (\:status mov) \\"ok\\")\\r\\n            (let [mv (\:data mov)]  \\r\\n              mv)))\\r\\n      )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n           (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}))] \\r\\n             (if(\= (\:status mov) \\"ok\\")\\r\\n               (let [mv (\:data mov)]  \\r\\n                 mv)))\\r\\n         )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n              (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}))] \\r\\n                (if(\= (\:status mov) \\"ok\\")\\r\\n                  (let [mv (\:data mov)]  \\r\\n                    mv)\\n                  \\"Greska\\"))\\r\\n            )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n                 (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" true}))] \\r\\n                   (if(\= (\:status mov) \\"ok\\")\\r\\n                     (let [mv (\:data mov)]  \\r\\n                       mv)\\r\\n                     \\"Greska\\"))\\r\\n               )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n                    (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" true}))] \\r\\n                      (if(\= (\:status mov) \\"ok\\")\\r\\n                        (let [mv (\:data mov)]  \\r\\n                          mv)\\r\\n                        mov))\\r\\n                  )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n                       (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" true}) true)] \\r\\n                         (if(\= (\:status mov) \\"ok\\")\\r\\n                           (let [mv (\:data mov)]  \\r\\n                             mv)\\r\\n                           mov))\\r\\n                     )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (let [mv (\:data mov)]  \\r\\n        mv)\\r\\n        \\"Greska\\"))\\r\\n)" "(defn get-movies1 [] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n      (let [movies (\:movies (\:data apidata))]\\r\\n        (doall (map get-movie-details movies)))))\\r\\n)" "(get-movies1)" "(into [1 2 3] [4 5])" "(source into)" "(\:source (meta into))" "(\:source (meta \#'into))" "(source into)" "(source max)" "(def v [{\:id 1 \:name \\"Stef\\" \:bzv \\"bgsfdsf\\"} {\:id 2 \:name \\"Stefan\\" \:bzv \\"bgsfdsf\\"}])" "v" "(defn get-person-data [person]\\r\\n  ({\:name (\:name person)\\r\\n    \:imdb_code (\:imdb_code person)\\r\\n   })\\r\\n)" "(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map get-person-data cast)))\\r\\n)" "(get-moviecast-data v)" "(doall (map get-person-data v))" "(defn get-person-data [person]\\r\\n     {\:name (\:name person)\\r\\n       \:imdb_code (\:imdb_code person)\\r\\n      }\\r\\n)" " (defn get-moviecast-data [cast]\\r\\n     (vec (doall (map get-person-data cast)))\\r\\n   )" "(get-moviecast-data v)" "(get-in [v \:name])" "(doall (map (get-in [% \:name]) v))" "(doall (map \#(get-in [% \:name]) v))" "(doall (map \#(get-in % [\:name]) v))" "(doall (map \#(get-in % [[\:name \:id]]) v))" "(doall (map \#(select-keys % [\:name \:id]) v))" "(require [cheshire.core \:refer \:all \:as ch])" "(require '[cheshire.core \:refer \:all \:as ch])" "(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)" "(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)" "(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)" "(defn get-movies-from-page [page] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" })]\\r\\n    (ch/parse-string apidata true))\\r\\n)" "(require '[seminarski.getdatafromurl \:as gd])" "(defn get-movies-from-page [page] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" })]\\r\\n    (ch/parse-string apidata true))\\r\\n)" "(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (let [mv (\:data mov)]  \\r\\n        mv)\\r\\n        \\"Greska\\"))\\r\\n)" "(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)" "(defn get-parsed-movie [movie]\\r\\n  ({\:_id (\:id movie)\\r\\n    \:imdb_code (\:imdb_code movie)\\r\\n    \:title (\:title_long movie)\\r\\n    \:year (\:year movie)\\r\\n    \:imdb_rating (\:rating movie)\\r\\n    \:genres (\:genres movie)\\r\\n    \:description (\:description_full movie)\\r\\n    \:directors (get-moviecast-data (\:directors movie))\\r\\n    \:actors (get-moviecast-data (\:actors movie))\\r\\n    })\\r\\n)" "(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (recur ((rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)" "(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv)))))))\\r\\n)" "(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (recur (inc page) (into movies (get-processed-movies moviesfrompage))))))\\r\\n)" "(get-movies)" "(defn get-parsed-movie [movie]\\r\\n     {\:_id (\:id movie)\\r\\n       \:imdb_code (\:imdb_code movie)\\r\\n       \:title (\:title_long movie)\\r\\n       \:year (\:year movie)\\r\\n       \:imdb_rating (\:rating movie)\\r\\n       \:genres (\:genres movie)\\r\\n       \:description (\:description_full movie)\\r\\n       \:directors (get-moviecast-data (\:directors movie))\\r\\n       \:actors (get-moviecast-data (\:actors movie))\\r\\n       }\\r\\n   )" "(defn get-processed-movies [movies]\\r\\n     (loop [mv movies mvfrompage []]\\r\\n       (if (empty? mv)\\r\\n         mvfrompage\\r\\n         (recur ((rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n   )" "(defn get-processed-movies [movies]\\r\\n     (loop [mv movies mvfrompage []]\\r\\n       (if (empty? mv)\\r\\n         mvfrompage\\r\\n         (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv)))))))\\r\\n   )" "(defn get-movies []\\r\\n     (loop [page 1 movies []]\\r\\n       (let [moviesfrompage (get-movies-from-page page)]\\r\\n         (if (empty? moviesfrompage)\\r\\n           movies\\r\\n           (recur (inc page) (into movies (get-processed-movies moviesfrompage))))))\\r\\n   )" "(get-movies)" "(require '[seminarski.getdatafromurl \:as gd]\\r\\n            '[cheshire.core \:refer \:all \:as ch])" "(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)\\r\\n\\r\\n(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)\\r\\n\\r\\n(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" })]\\r\\n    (ch/parse-string apidata true))\\r\\n)" "(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (let [mv (\:data mov)]  \\r\\n        mv)\\r\\n        \\"Greska\\"))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  ({\:_id (\:id movie)\\r\\n    \:imdb_code (\:imdb_code movie)\\r\\n    \:title (\:title_long movie)\\r\\n    \:year (\:year movie)\\r\\n    \:imdb_rating (\:rating movie)\\r\\n    \:genres (\:genres movie)\\r\\n    \:description (\:description_full movie)\\r\\n    \:directors (get-moviecast-data (\:directors movie))\\r\\n    \:actors (get-moviecast-data (\:actors movie))\\r\\n    })\\r\\n)\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (println (first mv))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          (println (first moviesfrompage))\\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)" "(get-movies)" "(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)\\r\\n\\r\\n(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)\\r\\n\\r\\n(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n       (\:movies (\:data apidata))\\r\\n       []))\\r\\n        \\r\\n)" "(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (\:data mov) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (println (first mv))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          (println (first moviesfrompage))\\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)" "(get-movies)" "(let \\r\\n    [sum (future (apply + (range 1e7)))] \\r\\n    (println \\"Started...\\") \\r\\n    (println \\"Done\: \\" @sum)\\r\\n)" "(defn get-processed-movies [movies]\\r\\n  (doall (map \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (\:data mov) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (println (first mv))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          (println (first moviesfrompage))\\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)" "(defn get-processed-movies [movies]\\r\\n  (doall (map \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n)\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (\:data mov) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (println (first mv))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          (println (first moviesfrompage))\\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)" "(get-movies)" "(defn get-processed-movies [movies]\\r\\n  (doall (map \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n)\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (\:data mov) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)" "(time get-movies)" "(time (get-movies))" "(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)" "(time (get-movies))" "(defn get-movies []\\r\\n     (loop [page 1 movies []]\\r\\n       (let [moviesfrompage (get-movies-from-page page)]\\r\\n         (if (empty? moviesfrompage)\\r\\n           movies\\r\\n           (do\\r\\n             \\r\\n             (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n   )" "(time (get-movies))" "(defn get-processed-movies [movies]\\r\\n     (doall (map \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n   )\\n(defn get-movies []\\r\\n        (loop [page 1 movies []]\\r\\n          (let [moviesfrompage (get-movies-from-page page)]\\r\\n            (if (empty? moviesfrompage)\\r\\n              movies\\r\\n              (do\\r\\n                \\r\\n                (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n      )" "(time (get-movies))" "(defn get-processed-movies [movies]\\r\\n        (doall (pmap \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n      )\\r\\n   (defn get-movies []\\r\\n           (loop [page 1 movies []]\\r\\n             (let [moviesfrompage (get-movies-from-page page)]\\r\\n               (if (empty? moviesfrompage)\\r\\n                 movies\\r\\n                 (do\\r\\n                   \\r\\n                   (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n         )" "(time (get-movies))" "(defn get-processed-movies [movies]\\r\\n           (doall (map \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n         )\\r\\n      (defn get-movies []\\r\\n              (loop [page 1 movies []]\\r\\n                (let [moviesfrompage (get-movies-from-page page)]\\r\\n                  (if (empty? moviesfrompage)\\r\\n                    movies\\r\\n                    (do\\r\\n                      \\r\\n                      (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n            )" "(time (get-movies))" "(defn get-movies []\\r\\n                 (loop [page 1 movies []]\\r\\n                   (let [moviesfrompage (get-movies-from-page page)]\\r\\n                     (if (empty? moviesfrompage)\\r\\n                       movies\\r\\n                       (do\\r\\n                         \\r\\n                         (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n               )" "(time (get-movies))" "(defn get-processed-movies [movies]\\r\\n           (doall (pmap \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n         )\\r\\n      (defn get-movies []\\r\\n              (loop [page 1 movies []]\\r\\n                (let [moviesfrompage (get-movies-from-page page)]\\r\\n                  (if (empty? moviesfrompage)\\r\\n                    movies\\r\\n                    (do\\r\\n                      \\r\\n                      (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n            )" "(time (get-movies))" "(require '[org.httpkit.client \:as http])" "(def urls (repeat 300 \\"https\://yts.to/api/v2/list_movies.json?quality\=3D&page\=4\\"))" "urls" "(let [futures (doall (map http/get urls))]\\r\\n  (doseq [resp futures]\\r\\n    ;; wait for server response synchronously\\r\\n    (println (-> @resp \:opt \:url) \\" status\: \\" (\:status @resp))\\r\\n    ))" "(let [\\r\\n    top-sites `(\\"www.google.com\\" \\"www.youtube.com\\" \\"www.yahoo.com\\" \\"www.msn.com\\")\\r\\n    futures-list (doall (\\r\\n            map \#(\\r\\n                future (slurp (str \\"http\://\\" %))\\r\\n            )\\r\\n            top-sites\\r\\n    ))\\r\\n    contents (map deref futures-list)\\r\\n    ]\\r\\n(doseq [s contents] (println s))\\r\\n)" "(let [\\r\\n       top-sites urls\\r\\n       futures-list (doall (\\r\\n               map \#(\\r\\n                   future (slurp %)\\r\\n               )\\r\\n               top-sites\\r\\n       ))\\r\\n       contents (map deref futures-list)\\r\\n       ]\\r\\n   (doseq [s contents] (println s))\\r\\n   )" "(let [\\r\\n          top-sites urls\\r\\n          futures-list (doall (\\r\\n                  map \#(do(\\n                            (Thread/sleep 100)\\r\\n                            (future (slurp %)))\\r\\n                  )\\r\\n                  top-sites\\r\\n          ))\\r\\n          contents (map deref futures-list)\\r\\n          ]\\r\\n      (doseq [s contents] (println s))\\r\\n      )" "(let [\\r\\n             top-sites urls\\r\\n             futures-list (doall (\\r\\n                     map \#(do(\\r\\n                               (Thread/sleep 100)\\r\\n                               future (slurp %))\\r\\n                     )\\r\\n                     top-sites\\r\\n             ))\\r\\n             contents (map deref futures-list)\\r\\n             ]\\r\\n         (doseq [s contents] (println s))\\r\\n         )" "(do (Thread/sleep 100) printl 12)" "(do (Thread/sleep 100) println 12)" "(let [\\r\\n                top-sites urls\\r\\n                futures-list (doall (\\r\\n                        map \#(do\\r\\n                                  (Thread/sleep 100)\\r\\n                                  (future (slurp %))\\r\\n                        )\\r\\n                        top-sites\\r\\n                ))\\r\\n                contents (map deref futures-list)\\r\\n                ]\\r\\n            (doseq [s contents] (println s))\\r\\n            )" "(let [\\r\\n                top-sites urls\\r\\n                futures-list (doall (\\r\\n                        map \#(do\\r\\n                                  (Thread/sleep 500)\\r\\n                                  (future (slurp %))\\r\\n                        )\\r\\n                        top-sites\\r\\n                ))\\r\\n                contents (map deref futures-list)\\r\\n                ]\\r\\n            (doseq [s contents] (println s))\\r\\n            )" "(defn get-movie-details1 [movie]\\r\\n  (let [mov (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})] \\r\\n    mov)\\r\\n)\\r\\n\\r\\n(defn json-parse1 [data] \\r\\n  (let [mv (ch/parse-string data true)]\\r\\n    (if(\= (\:status mv) \\"ok\\")\\r\\n      (\:data mv) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie1 [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (let [details (get-movie-details1 (first mv))]\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (get-parsed-movie1(json-parse1 (details)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" " (require '[seminarski.getdatafromurl \:as gd]\\r\\n            '[cheshire.core \:refer \:all \:as ch])" "\\r\\n(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)\\r\\n\\r\\n(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)\\r\\n\\r\\n(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n       (\:movies (\:data apidata))\\r\\n       []))\\r\\n        \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-processed-movies-map [movies]\\r\\n  (doall (map \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies-pmap [movies]\\r\\n  (doall (pmap \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n)\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (\:data mov) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-moviecast-data [cast]\\n  \\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-movie-details1 [movie]\\r\\n  (let [mov (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})] \\r\\n    mov)\\r\\n)\\r\\n\\r\\n(defn json-parse1 [data] \\r\\n  (let [mv (ch/parse-string data true)]\\r\\n    (if(\= (\:status mv) \\"ok\\")\\r\\n      (\:data mv) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie1 [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (let [details (get-movie-details1 (first mv))]\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (get-parsed-movie1(json-parse1 (details)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "\\r\\n\\r\\n(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)\\r\\n\\r\\n(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)\\r\\n\\r\\n(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n       (\:movies (\:data apidata))\\r\\n       []))\\r\\n        \\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (\:data mov) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-processed-movies-map [movies]\\r\\n  (doall (map \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies-pmap [movies]\\r\\n  (doall (pmap \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-movie-details1 [movie]\\r\\n  (let [mov (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})] \\r\\n    mov)\\r\\n)\\r\\n\\r\\n(defn json-parse1 [data] \\r\\n  (let [mv (ch/parse-string data true)]\\r\\n    (if(\= (\:status mv) \\"ok\\")\\r\\n      (\:data mv) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie1 [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (let [details (get-movie-details1 (first mv))]\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (get-parsed-movie1(json-parse1 (details)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies get-movies1))" "(time (deref-movies (get-movies1)))" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (let [details (get-movie-details1 (first mv))]\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (get-parsed-movie1(json-parse1 details))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (let [details (get-movie-details1 (first mv))]\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie1(json-parse1 details)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(time (get-movies))" "\\r\\n(require '[seminarski.getdatafromurl \:as gd]\\r\\n            '[cheshire.core \:refer \:all \:as ch])\\r\\n\\r\\n(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)\\r\\n\\r\\n(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)\\r\\n\\r\\n(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n       (\:movies (\:data apidata))\\r\\n       []))\\r\\n        \\r\\n)" "(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (\:data mov) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-processed-movies-map [movies]\\r\\n  (doall (map \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n)\\r\\n\\r\\n(defn get-processed-movies-pmap [movies]\\r\\n  (doall (pmap \#(get-parsed-movie (get-movie-details %)) movies))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(get-movie-details (first mv))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-movie-details1 [movie]\\r\\n  (let [mov (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})] \\r\\n    mov)\\r\\n)\\r\\n\\r\\n(defn json-parse1 [data] \\r\\n  (let [mv (ch/parse-string data true)]\\r\\n    (if(\= (\:status mv) \\"ok\\")\\r\\n      (\:data mv) \\r\\n       {}))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie1 [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (let [details (get-movie-details1 (first mv))]\\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie1(json-parse1 details)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (get-movies))" "(time (deref-movies (get-movies1)))" "(defn get-movies-json-tag []\\r\\n  [[\:data \:movies] []]\\r\\n)\\r\\n\\r\\n(defn get-movie-details-json-tag []\\r\\n  [[\:data] {}]\\r\\n)" "(defn get-movie-details1 [movie]\\r\\n  (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})  \\r\\n)\\r\\n\\r\\n(defn json-parse [data [json-tag col]] \\r\\n (let [mv (ch/parse-string data true)]\\r\\n   (if(\= (\:status mv) \\"ok\\")\\r\\n      (get-in mv json-tag) \\r\\n       col))\\r\\n)" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      \\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie1(json-parse (get-movie-details1 (first mv)) get-movie-details-json-tag))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      \\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (Thread/sleep 200) (get-parsed-movie1(json-parse (get-movie-details1 (first mv)) get-movie-details-json-tag))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      \\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (Thread/sleep 200) (get-parsed-movie1(json-parse (get-movie-details1 (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      \\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (Thread/sleep 300) (get-parsed-movie1(json-parse (get-movie-details1 (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      \\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (Thread/sleep 500) (get-parsed-movie1(json-parse (get-movie-details1 (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (do (Thread/sleep 100) (get-movies-from-page page))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      \\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (Thread/sleep 700) (get-parsed-movie1(json-parse (get-movie-details1 (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (do (Thread/sleep 200) (get-movies-from-page page))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-processed-movies1 [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      \\r\\n        \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie1(json-parse (get-movie-details1 (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies1 []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies1 moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies1)))" "(defn get-movies-json-tag []\\r\\n  [[\:data \:movies] []]\\r\\n)\\r\\n\\r\\n(defn get-movie-details-json-tag []\\r\\n  [[\:data] {}]\\r\\n)\\r\\n\\r\\n(defn json-parse [data [json-tag col]] \\r\\n (let [mv (ch/parse-string data true)]\\r\\n   (if(\= (\:status mv) \\"ok\\")\\r\\n      (get-in mv json-tag) \\r\\n       col))\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})  \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))\\r\\n    (let [moviesfrompage (json-parse (get-movies-from-page page) (get-movies-json-tag))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(defn get-movies-json-tag []\\r\\n  [[\:data \:movies] []]\\r\\n)\\r\\n\\r\\n(defn get-movie-details-json-tag []\\r\\n  [[\:data] {}]\\r\\n)\\r\\n\\r\\n(defn json-parse [data [json-tag col]] \\r\\n (let [mv (ch/parse-string data true)]\\r\\n   (if(\= (\:status mv) \\"ok\\")\\r\\n      (get-in mv json-tag) \\r\\n       col))\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})  \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (json-parse (get-movies-from-page page) (get-movies-json-tag))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (get-movies-from-page page)]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "\\r\\n  (require '[seminarski.getdatafromurl \:as gd]\\r\\n            '[cheshire.core \:refer \:all \:as ch])\\r\\n\\r\\n(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)\\r\\n\\r\\n(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)\\r\\n\\r\\n(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)\\r\\n\\r\\n(defn get-movies-json-tag []\\r\\n  [[\:data \:movies] []]\\r\\n)\\r\\n\\r\\n(defn get-movie-details-json-tag []\\r\\n  [[\:data] {}]\\r\\n)\\r\\n\\r\\n(defn json-parse [data [json-tag col]] \\r\\n (let [mv (ch/parse-string data true)]\\r\\n   (if(\= (\:status mv) \\"ok\\")\\r\\n      (get-in mv json-tag) \\r\\n       col))\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})  \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (json-parse (get-movies-from-page page) (get-movies-json-tag))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (json-parse (get-movies-from-page page) (get-movies-json-tag))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)))))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (Thread/sleep 300) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(time (get-movies))" "(time (deref-movies (get-movies-parallel)))" "(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1000)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-movies-from-page [page] \\r\\n  (do\\r\\n    (println (str (get-url-listmoviesapi) page))\\r\\n    (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) )\\r\\n)" "(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)\\r\\n\\r\\n(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)\\r\\n\\r\\n(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)\\r\\n\\r\\n(defn get-movies-json-tag []\\r\\n  [[\:data \:movies] []]\\r\\n)\\r\\n\\r\\n(defn get-movie-details-json-tag []\\r\\n  [[\:data] {}]\\r\\n)\\r\\n\\r\\n(defn json-parse [data [json-tag col]] \\r\\n (let [mv (ch/parse-string data true)]\\r\\n   (if(\= (\:status mv) \\"ok\\")\\r\\n      (get-in mv json-tag) \\r\\n       col))\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (do\\r\\n    (println (str (get-url-listmoviesapi) page))\\r\\n    (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) )\\r\\n)\\r\\n\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})  \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (json-parse (get-movies-from-page page) (get-movies-json-tag))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        do( \\r\\n          (printl \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        (do\\r\\n          (printl \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        (do\\r\\n          (println \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (vec (doall (map deref movies)))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        (do\\r\\n          (println \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (do\\r\\n    println (\\"KRENUO SA DEREF\\")\\r\\n    (vec (doall (map deref movies))))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn deref-movies [movies]\\r\\n  (do\\r\\n    println \\"KRENUO SA DEREF\\"\\r\\n    (vec (doall (map deref movies))))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "\\r\\n  (require '[seminarski.getdatafromurl \:as gd]\\r\\n            '[cheshire.core \:refer \:all \:as ch])\\r\\n\\r\\n(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)\\r\\n\\r\\n(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)\\r\\n\\r\\n(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)\\r\\n\\r\\n(defn get-movies-json-tag []\\r\\n  [[\:data \:movies] []]\\r\\n)\\r\\n\\r\\n(defn get-movie-details-json-tag []\\r\\n  [[\:data] {}]\\r\\n)\\r\\n\\r\\n(defn json-parse [data [json-tag col]] \\r\\n (let [mv (ch/parse-string data true)]\\r\\n   (if(\= (\:status mv) \\"ok\\")\\r\\n      (get-in mv json-tag) \\r\\n       col))\\r\\n)\\r\\n\\r\\n(defn get-movies-from-page [page] \\r\\n  (do\\r\\n    (println (str (get-url-listmoviesapi) page))\\r\\n    (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" page, \\"quality\\" \\"3D\\" }) )\\r\\n)\\r\\n\\r\\n\\r\\n(defn get-movie-details [movie]\\r\\n  (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"})  \\r\\n)\\r\\n\\r\\n\\r\\n(defn get-moviecast-data [cast]\\r\\n  (vec (doall (map \#(select-keys % [\:name \:imdb_code]) cast)))\\r\\n)\\r\\n\\r\\n(defn get-parsed-movie [movie]\\r\\n  {\:_id (\:id movie)\\r\\n   \:imdb_code (\:imdb_code movie)\\r\\n   \:title (\:title_long movie)\\r\\n   \:year (\:year movie)\\r\\n   \:imdb_rating (\:rating movie)\\r\\n   \:genres (\:genres movie)\\r\\n   \:description (\:description_full movie)\\r\\n   \:directors (get-moviecast-data (\:directors movie))\\r\\n   \:actors (get-moviecast-data (\:actors movie))\\r\\n   }\\r\\n)\\r\\n\\r\\n\\r\\n(defn get-processed-movies [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage\\r\\n      (do\\r\\n        (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))\\r\\n        (recur (rest mv) (conj mvfrompage (get-parsed-movie(json-parse (get-movie-details (first mv)) (get-movie-details-json-tag))))))))\\r\\n)\\r\\n\\r\\n(defn get-movies []\\r\\n  (loop [page 1 movies []]\\r\\n    (let [moviesfrompage (json-parse (get-movies-from-page page) (get-movies-json-tag))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        movies\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies moviesfrompage)))))))\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (println \\"stef\\") (get-parsed-movie (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        (do\\r\\n          (println \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (do\\r\\n    println \\"KRENUO SA DEREF\\"\\r\\n    (vec (doall (map deref movies))))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (Thread/sleep 200) (println \\"stef\\") (get-parsed-movie (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 1500)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        (do\\r\\n          (println \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (do\\r\\n    println \\"KRENUO SA DEREF\\"\\r\\n    (vec (doall (map deref movies))))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage (future (do (Thread/sleep 500) (println \\"stef\\") (get-parsed-movie (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag)))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 300)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        (do\\r\\n          (println \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (do\\r\\n    println \\"KRENUO SA DEREF\\"\\r\\n    (vec (doall (map deref movies))))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage ((do (Thread/sleep 500) (future (do (println \\"stef\\") (get-parsed-movie (json-parse (get-movie-details (first mv)) (get-movie-details-json-tag)))))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 300)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        (do\\r\\n          (println \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (do\\r\\n    println \\"KRENUO SA DEREF\\"\\r\\n    (vec (doall (map deref movies))))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(defn get-processed-movies-parallel [movies]\\r\\n  (loop [mv movies mvfrompage []]\\r\\n    (if (empty? mv)\\r\\n      mvfrompage    \\r\\n        (recur (rest mv) (conj mvfrompage \\r\\n                                            (do \\r\\n                                              (Thread/sleep 500) \\r\\n                                              (future \\r\\n                                                (do \\r\\n                                                  (println \\"stef\\") \\r\\n                                                  (get-parsed-movie \\r\\n                                                    (json-parse \\r\\n                                                      (get-movie-details (first mv)) (get-movie-details-json-tag))))))))))\\r\\n)\\r\\n  \\r\\n(defn get-movies-parallel []\\r\\n  (loop [page 1 movies [] first-time true]\\r\\n    (let [moviesfrompage (do (if (not first-time) (Thread/sleep 300)) (json-parse (get-movies-from-page page) (get-movies-json-tag)))]\\r\\n      (if (empty? moviesfrompage)\\r\\n        (do\\r\\n          (println \\"EMPTY\\")\\r\\n          movies)\\r\\n        (do\\r\\n          \\r\\n          (recur (inc page) (into movies (get-processed-movies-parallel moviesfrompage)) false)))))\\r\\n)\\r\\n  \\r\\n(defn deref-movies [movies]\\r\\n  (do\\r\\n    println \\"KRENUO SA DEREF\\"\\r\\n    (vec (doall (map deref movies))))\\r\\n)" "(time (deref-movies (get-movies-parallel)))" "(ch/generate-string {\:foo \\"bar\\" \:baz 5})" "(generate-stream {\:foo \\"bar\\" \:baz 5} (clojure.java.io/writer \\"/conf/test.json\\"))" "(generate-stream {\:foo \\"bar\\" \:baz 5} (clojure.java.io/writer \\"conf/test.json\\"))" "(with-open [wrt (writer \\"conf/test.json\\")]\\r\\n    (.write wrt (ch/generate-string {\:key1 \\"val1\\" \:key2 \\"val2\\"})))" "(use 'clojure.java.io)" "(with-open [wrt (writer \\"conf/test.json\\")]\\r\\n    (.write wrt (ch/generate-string {\:key1 \\"val1\\" \:key2 \\"val2\\"})))" "(require '[seminarski.getdatafromurl \:as gd]\\r\\n            '[cheshire.core \:refer \:all \:as ch])" "(use 'clojure.java.io)" "(with-open [wrtr (writer \\"conf/test.json\\")]\\r\\n    (.write wrtr (ch/generate-string {\:key1 \\"val1\\" \:key2 \\"val2\\"})))" "(require '[clojure.java.io \:as wr])" "(defn save-json [data]\\r\\n  (with-open [wrtr (wr/writer \\"conf/test.json\\")]\\r\\n       (.write wrtr (ch/generate-string data)))\\r\\n)" "(save-json {\:key1stef \\"val1\\" \:key2stef \\"val2\\"})" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(\:require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(defn get-movies-from-api []\\r\\n  (try\\r\\n    (let [movies (parser/get-movies)]\\r\\n      (do\\r\\n        (parser/save-json movies)\\r\\n        (db/insert-batch  \\"movies\\" movies)\\r\\n        (str \\"success\\")))\\r\\n    (catch Exception e\\r\\n      (.printStackTrace e)))\\r\\n)" "(time (get-movies-from-api))" "(\:require [seminarski.parser \:as parser]\\r\\n            [seminarski.db \:as db])" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(defn get-movies-from-api []\\r\\n  (try\\r\\n    (let [movies (parser/get-movies)]\\r\\n      (do\\r\\n        (parser/save-json movies)\\r\\n        (db/insert-batch  \\"movies\\" movies)\\r\\n        (str \\"success\\")))\\r\\n    (catch Exception e\\r\\n      (.printStackTrace e)))\\r\\n)" "(time (get-movies-from-api))" "(printl 4)" "(println 4)" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(bound? db/connection)" "(mo/disconnect db/connection)" "(db/mo/disconnect db/connection)" "(db/disconnect)" "(try\\n  (.throw Exception)\\n  (catch Exception e\\n    (.printStackTrace e)))" "(try\\n  (throw (Exception. \\"nesto\\"))\\n  (catch Exception e\\n    (.printStackTrace e)))" "(try\\n  (throw (Exception. \\"nesto\\"))\\n  (catch Exception e\\n    (str \\"caught exception\: \\" (.getMessage e))))" "(if(\= (\:status nil) \\"ok\\")\\n  (println \\"Stef\\"))" "(if(\= (\:status nil) \\"ok\\")\\n  (println \\"Stef\\")\\n  (println \\"Greska\\"))" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(defn get-movies-from-api []\\r\\n  (try\\r\\n    (let [movies (parser/get-movies)]\\r\\n      (do\\r\\n        (parser/save-json movies)\\r\\n        (db/insert-batch  \\"movies\\" movies)\\r\\n        (str \\"success\\")))\\r\\n    (catch Exception e\\r\\n      (.printStackTrace e)))\\r\\n)" "(get-movies-from-api)" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(defn get-movies-from-api []\\r\\n  (try\\r\\n    (let [movies (parser/get-movies)]\\r\\n      (do\\r\\n        (parser/save-json movies)\\r\\n        (db/insert-batch  \\"movies\\" movies)\\r\\n        (str \\"success\\")))\\r\\n    (catch Exception e\\r\\n      (.printStackTrace e)))\\r\\n)" "(time (get-movies-from-api))" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(defn get-movies-from-api []\\r\\n  (try\\r\\n    (let [movies (parser/deref-movies (parser/get-movies-parallel))]\\r\\n      (do\\r\\n        (parser/save-json movies)\\r\\n        (str \\"success\\")))\\r\\n    (catch Exception e\\r\\n      (.printStackTrace e)))\\r\\n)" "(time (get-movies-from-api))" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(time (parser/get-movies-map))" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(time (parser/get-movies-pmap))" "(time (parser/get-movies-map))" "(require '[seminarski.parser \:as parser]\\r\\n            '[seminarski.db \:as db])" "(time (parser/get-movies-pmap))" "(defn get-movies-from-api []\\r\\n  (try\\r\\n    (let [movies (parser/get-movies)]\\r\\n      (do\\r\\n        (parser/save-json movies)\\r\\n        (str \\"success\\")))\\r\\n    (catch Exception e\\r\\n      (.printStackTrace e)))\\r\\n)" "(time (get-movies-from-api))" "(time (slurp \\"conf/test3.json\\"))" "(use 'clojure.java.io)\\r\\n(with-open [rdr (reader \\"conf/test3.json\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line)))" "(time (use 'clojure.java.io)(with-open [rdr (reader \\"conf/test3.json\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line))))" "(time (with-open [rdr (reader \\"conf/test3.json\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line))))" "\\n  (require \\r\\n            '[cheshire.core \:refer \:all \:as ch]\\r\\n            )" "(let [data (ch/parse-string (slurp \\"conf/test3.json\\") true)]\\n  (count data))" "(let [data1 (ch/parse-string (slurp \\"conf/test.json\\") true) data2 (ch/parse-string (slurp \\"conf/test2.json\\") true)]\\n  (let [data\\n    (into data1 data2)]\\n    (count data)))" "(defn save-json [data]\\r\\n  (with-open [wrtr (wr/writer \\"conf/test4.json\\")]\\r\\n       (.write wrtr (ch/generate-string data)))\\r\\n)" "(require '[clojure.java.io \:as wr])" "(defn save-json [data]\\r\\n  (with-open [wrtr (wr/writer \\"conf/test4.json\\")]\\r\\n       (.write wrtr (ch/generate-string data)))\\r\\n)" "(let [data1 (ch/parse-string (slurp \\"conf/test.json\\") true) data2 (ch/parse-string (slurp \\"conf/test2.json\\") true)]\\r\\n     (let [data\\r\\n       (into data1 data2)]\\n       (do\\n         (save-json data)\\r\\n         (count data))))" "(defn save-json [data]\\r\\n  (with-open [wrtr (wr/writer \\"conf/test5.json\\")]\\r\\n       (.write wrtr data))\\r\\n)" "(let [data (ch/parse-string (slurp \\"conf/test4.json\\") true)]\\n  (save-json data))" "(defn save-json2 [data]\\r\\n   (spit \\"conf/test5.json\\" (with-out-str (pr my-data)))\\r\\n)" "(defn save-json2 [data]\\r\\n   (spit \\"conf/test5.json\\" (with-out-str (pr data)))\\r\\n)" "(let [data (ch/parse-string (slurp \\"conf/test4.json\\") true)]\\n  (save-json2 data))" "(defn save-json2 [data]\\r\\n   (spit \\"conf/test6.edn\\" (with-out-str (pr data)))\\r\\n)" "(let [data (ch/parse-string (slurp \\"conf/test4.json\\") true)]\\n  (save-json2 data))" "(let [data (ch/parse-string (slurp \\"conf/test4.json\\") true)]\\n  (do\\n    (printl data)\\n  (save-json2 data)))" "(let [data (ch/parse-string (slurp \\"conf/test4.json\\") true)]\\n  (do\\n    (println data)\\n  (save-json2 data)))" "(slurp \\"conf/test4.json\\")" "(let [data (ch/parse-string (read-string (slurp \\"conf/test4.json\\")) true)]\\n  (save-json2 data))" "(read-string (slurp \\"conf/test4.json\\"))" "(slurp \\"conf/test4.json\\")" "(ch/parse-string (slurp \\"conf/test4.json\\") true)" "(let [data (vec (ch/parse-string (read-string (slurp \\"conf/test4.json\\")) true))]\\n  (save-json2 data))" "(let [data (ch/parse-string  (slurp \\"conf/test4.json\\") true)]\\n  (save-json2 data))" "(let [data (vec (ch/parse-string  (slurp \\"conf/test4.json\\") true))]\\n  (save-json2 data))" "(let [data (read-string (slurp \\"conf/test6.edn\\"))]\\n  data)" "(let [data (read-string (slurp \\"conf/test6.edn\\"))]\\n  (count data))" "(ch/generate-string [\:foo \\"bar\\" \:baz 5])" "(def v (ch/generate-string [\:foo \\"bar\\" \:baz 5]))" "(ch/parse-string v)" "(ch/parse-string-strict v)" "(ch/parse-string-strict v true)"]
eclipse.preferences.version=1
