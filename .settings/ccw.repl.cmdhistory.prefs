cmdhistory=["(require '[clj-http.client \:as client])" "(client/get \\"https\://yts.to/api/v2/movie_details.json?movie_id\=4396\\")\\n\\r\\n(client/get \\"https\://yts.to/api/v2/movie_details.json?movie_id\=4396\\")" "(\:body (client/get \\"https\://yts.to/api/v2/movie_details.json?movie_id\=4396\\"))" "(\:require [clj-http.client \:as client])" "\:require [clj-http.client \:as client]" "(require [clj-http.client \:as client])" "(require clj-http.client \:as client)" "(require 'clj-http.client \:as client)" "(require '[clj-http.client \:as client])" "(client/get \\"http\://elitecashfunnel.com\\" \\n            {\:query-params {\:a {\:b {\:c 5} \:e {\:f 6}}}})" "(defn get-limit-listmoviesapi [] (\\r\\n  50\\r\\n)" "> (defn get-limit-listmoviesapi [] (\\r\\n     (50)\\r\\n   )" "(defn get-limit-listmoviesapi [] (\\r\\n        (str 50)\\r\\n      )" "(defn get-limit-listmoviesapi [] (\\r\\n           (str \\"50\\")\\r\\n         )" "(defn get-url-listmoviesapi [] (\\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)" "(println 1)" "(defn get-api-key []\\r\\n  (str \\"cfu7ks8sbc9yur4sts9zayyx\\")\\r\\n  )" "defn getdata [url, params] (\\r\\n  (let [formattedparams {\:query-params params}]\\r\\n    (\:body (client/get url formattedparams)   \\r\\n  )\\r\\n)" "(defn getdata [url, params] (\\r\\n  (let [formattedparams {\:query-params params}]\\r\\n    (\:body (client/get url formattedparams))  \\r\\n  )\\r\\n))" "(defn get-limit-listmoviesapi [] (\\r\\n  50\\r\\n))" "(get-limit-listmoviesapi)" "(defn get-limit-listmoviesapi [] \\r\\n     50\\r\\n   )" "(get-limit-listmoviesapi)" "(defn get-movies [] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" get-limit-listmoviesapi, \\"page\\" 1 })]\\n        apidata))" "(require '[seminarski.getdatafromurl \:as gd])" "(defn get-movies [] \\r\\n     (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" get-limit-listmoviesapi, \\"page\\" 1 })]\\r\\n           apidata))" "(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)" "(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)" " (defn get-movies [] \\r\\n        (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" get-limit-listmoviesapi, \\"page\\" \\"1\\" })]\\r\\n              apidata))" "(get-movies)" "(defn get-movies [] \\r\\n           (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" \\"1\\" })]\\r\\n                 apidata))" "(get-movies)" "(defn get-movies [] \\r\\n              (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" \\"4\\" })]\\r\\n                    apidata))" "(get-movies)" "(require '[cheshire.core \:refer \:all \:as ch])" "(require '[cheshire.core \:as ch])" "(require '[cheshire.core \:refer \:all \:as ch])" "(defn get-url-listmoviesapi [] \\r\\n  (str \\"https\://yts.to/api/v2/list_movies.json\\")\\r\\n)" "(defn get-limit-listmoviesapi [] \\r\\n  50\\r\\n)" "(defn get-movies [] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" \\"4\\" })]\\r\\n    (ch/parse-string apidata true))\\r\\n)" "(require '[seminarski.getdatafromurl] \:as gd)" "(require '[seminarski.getdatafromurl \:as gd])" "(defn get-movies [] \\r\\n  (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" \\"4\\" })]\\r\\n    (ch/parse-string apidata true))\\r\\n)" "(get-movies)" "(def a [1 2 3 4 5 6 7])" "(map println a)" "(dorun (map println a))" "(doall (map println a))" "(defn get-movies [] \\r\\n     (let [apidata (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 })]\\r\\n       (ch/parse-string apidata true))\\r\\n   )" "(get-movies)" "(conj [1 2 3] [5 6 7])" "(defn get-movies1 [] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n      (let [movies (\:movies (\:data apidata))]\\r\\n        (doall (map get-movie-details (\:id movies))))))\\r\\n)" "(defn get-url-moviedetailsapi [] \\r\\n  (str \\"https\://yts.to/api/v2/movie_details.json\\")\\r\\n)" "(defn get-movie-details [id]\\r\\n  (let [movie (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" id, \\"with_casts\\" true}))] \\r\\n    (if(\= (\:status movie) \\"ok\\")\\r\\n      (let [mv (\:data apidata)]  \\r\\n        mv)))\\r\\n)" "(defn get-movie-details [id]\\r\\n     (let [movie (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" id, \\"with_casts\\" true}))] \\r\\n       (if(\= (\:status movie) \\"ok\\")\\r\\n         (let [mv (\:data movie)]  \\r\\n           mv)))\\r\\n   )" "(defn get-movies1 [] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n      (let [movies (\:movies (\:data apidata))]\\r\\n        (doall (map get-movie-details (\:id movies))))))\\r\\n)" "(get-movies1)" "(defn get-movies1 [] \\r\\n     (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n       (if(\= (\:status apidata) \\"ok\\")\\r\\n         (let [movies (\:movies (\:data apidata))]\\r\\n           movies)))\\r\\n   )" "(get-movies1)" "(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" (\:id movie), \\"with_casts\\" true}))] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (let [mv (\:data mov)]  \\r\\n        mv)))\\r\\n)" "(defn get-movies1 [] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n      (let [movies (\:movies (\:data apidata))]\\r\\n        (doall (map get-movie-details movies)))))\\r\\n)" "(get-movies1)" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n     (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" (\:id movie), \\"with_casts\\" \\"true\\"}))] \\r\\n       (if(\= (\:status mov) \\"ok\\")\\r\\n         (let [mv (\:data mov)]  \\r\\n           mv)))\\r\\n   )" "(get-movie-details {\:id 1})" "(get-movie-details {\:id 10})" "(defn get-movie-details [movie]\\r\\n        (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"id\\" (\:id movie), \\"with_cast\\" \\"true\\"}))] \\r\\n          (if(\= (\:status mov) \\"ok\\")\\r\\n            (let [mv (\:data mov)]  \\r\\n              mv)))\\r\\n      )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n           (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}))] \\r\\n             (if(\= (\:status mov) \\"ok\\")\\r\\n               (let [mv (\:data mov)]  \\r\\n                 mv)))\\r\\n         )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n              (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}))] \\r\\n                (if(\= (\:status mov) \\"ok\\")\\r\\n                  (let [mv (\:data mov)]  \\r\\n                    mv)\\n                  \\"Greska\\"))\\r\\n            )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n                 (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" true}))] \\r\\n                   (if(\= (\:status mov) \\"ok\\")\\r\\n                     (let [mv (\:data mov)]  \\r\\n                       mv)\\r\\n                     \\"Greska\\"))\\r\\n               )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n                    (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" true}))] \\r\\n                      (if(\= (\:status mov) \\"ok\\")\\r\\n                        (let [mv (\:data mov)]  \\r\\n                          mv)\\r\\n                        mov))\\r\\n                  )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n                       (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" true}) true)] \\r\\n                         (if(\= (\:status mov) \\"ok\\")\\r\\n                           (let [mv (\:data mov)]  \\r\\n                             mv)\\r\\n                           mov))\\r\\n                     )" "(get-movie-details {\:id 1})" "(defn get-movie-details [movie]\\r\\n  (let [mov (ch/parse-string (gd/get-data (get-url-moviedetailsapi) {\\"movie_id\\" (\:id movie), \\"with_cast\\" \\"true\\"}) true)] \\r\\n    (if(\= (\:status mov) \\"ok\\")\\r\\n      (let [mv (\:data mov)]  \\r\\n        mv)\\r\\n        \\"Greska\\"))\\r\\n)" "(defn get-movies1 [] \\r\\n  (let [apidata (ch/parse-string (gd/get-data (get-url-listmoviesapi) {\\"limit\\" (get-limit-listmoviesapi), \\"page\\" 4 }) true)]\\r\\n    (if(\= (\:status apidata) \\"ok\\")\\r\\n      (let [movies (\:movies (\:data apidata))]\\r\\n        (doall (map get-movie-details movies)))))\\r\\n)" "(get-movies1)"]
eclipse.preferences.version=1
